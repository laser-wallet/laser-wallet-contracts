{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LW__exec__invalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__exec__refundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__init__notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__init__refundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__multiCall__notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__simulateTransaction__invalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__simulateTransaction__mainCallError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__simulateTransaction__refundFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__verifySignatures__invalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__verifySignatures__notGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LW__verifySignatures__notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LaserWallet__invalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Me__notMe",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Owner__changeOwner__invalidOwnerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Owner__initOwner__invalidOwnerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Owner__initOwner__walletInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__access__guardiansLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__access__walletLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__addGuardian__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__addRecoveryOwner__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__initGuardians__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__initGuardians__underflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__initRecoveryOwners__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__initRecoveryOwners__underflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__removeGuardian__incorrectPreviousGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__removeGuardian__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__removeGuardian__underflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__removeRecoveryOwner__incorrectPreviousRecoveryOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__removeRecoveryOwner__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__removeRecoveryOwner__underflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__swapGuardian__invalidOldGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__swapGuardian__invalidPrevGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__swapRecoveryOwner__invalidOldRecoveryOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__swapRecoveryOwner__invalidPrevRecoveryOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__validateRecoveryOwner__notAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Singleton__upgradeSingleton__incorrectAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Singleton__upgradeSingleton__notLaser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Utils__returnSigner__invalidContractSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Utils__returnSigner__invalidSignature",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ExecFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "ExecSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedGuardian",
          "type": "address"
        }
      ],
      "name": "GuardianRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGuardian",
          "type": "address"
        }
      ],
      "name": "GuardianSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "NewGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRecoveryOwner",
          "type": "address"
        }
      ],
      "name": "NewRecoveryOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "removedRecoveryOwner",
          "type": "address"
        }
      ],
      "name": "RecoveryOwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRecoveryOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRecoveryOwner",
          "type": "address"
        }
      ],
      "name": "RecoveryOwnerSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RecoveryUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recoveryOwners",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "guardians",
          "type": "address[]"
        }
      ],
      "name": "Setup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSingleton",
          "type": "address"
        }
      ],
      "name": "SingletonChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WalletLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "WalletRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "WalletUnlocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRecoveryOwner",
          "type": "address"
        }
      ],
      "name": "addRecoveryOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGuardians",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecoveryOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardiansLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_recoveryOwners",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_guardians",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "ownerSignature",
          "type": "bytes"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recoveryOwner",
          "type": "address"
        }
      ],
      "name": "isRecoveryOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILaserWallet.Transaction[]",
          "name": "transactions",
          "type": "tuple[]"
        }
      ],
      "name": "multiCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "result",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        }
      ],
      "name": "operationHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoveryUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "guardianToRemove",
          "type": "address"
        }
      ],
      "name": "removeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevRecoveryOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recoveryOwnerToRemove",
          "type": "address"
        }
      ],
      "name": "removeRecoveryOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "returnSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPriorityFeePerGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        }
      ],
      "name": "simulateTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalGas",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signatures",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "pos",
          "type": "uint256"
        }
      ],
      "name": "splitSigs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oldGuardian",
          "type": "address"
        }
      ],
      "name": "swapGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prevRecoveryOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newRecoveryOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oldRecoveryOwner",
          "type": "address"
        }
      ],
      "name": "swapRecoveryOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockGuardians",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_singleton",
          "type": "address"
        }
      ],
      "name": "upgradeSingleton",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4ba3c44ed5edccfc74f691fee1f66282152f5039845ce4705683378422278982",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2943808",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xca6e00768a964131ac4662bec05d696ea9437bc1a6c1c3e70babc2bfd912d58e",
    "transactionHash": "0x4ba3c44ed5edccfc74f691fee1f66282152f5039845ce4705683378422278982",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2943808",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9dd8a77b93a979bf45e6c00158c4c4e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LW__exec__invalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__exec__refundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__init__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__init__refundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__multiCall__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__simulateTransaction__invalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__simulateTransaction__mainCallError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__simulateTransaction__refundFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__verifySignatures__invalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__verifySignatures__notGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LW__verifySignatures__notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LaserWallet__invalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Me__notMe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Owner__changeOwner__invalidOwnerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Owner__initOwner__invalidOwnerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Owner__initOwner__walletInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__access__guardiansLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__access__walletLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__addGuardian__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__addRecoveryOwner__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__initGuardians__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__initGuardians__underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__initRecoveryOwners__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__initRecoveryOwners__underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__removeGuardian__incorrectPreviousGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__removeGuardian__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__removeGuardian__underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__removeRecoveryOwner__incorrectPreviousRecoveryOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__removeRecoveryOwner__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__removeRecoveryOwner__underflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__swapGuardian__invalidOldGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__swapGuardian__invalidPrevGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__swapRecoveryOwner__invalidOldRecoveryOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__swapRecoveryOwner__invalidPrevRecoveryOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__validateRecoveryOwner__notAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Singleton__upgradeSingleton__incorrectAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Singleton__upgradeSingleton__notLaser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Utils__returnSigner__invalidContractSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Utils__returnSigner__invalidSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ExecFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ExecSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedGuardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"}],\"name\":\"GuardianSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"NewGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecoveryOwner\",\"type\":\"address\"}],\"name\":\"NewRecoveryOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedRecoveryOwner\",\"type\":\"address\"}],\"name\":\"RecoveryOwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecoveryOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRecoveryOwner\",\"type\":\"address\"}],\"name\":\"RecoveryOwnerSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RecoveryUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recoveryOwners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSingleton\",\"type\":\"address\"}],\"name\":\"SingletonChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WalletLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"WalletRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WalletUnlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecoveryOwner\",\"type\":\"address\"}],\"name\":\"addRecoveryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardians\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecoveryOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardiansLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_recoveryOwners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_guardians\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"ownerSignature\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoveryOwner\",\"type\":\"address\"}],\"name\":\"isRecoveryOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct ILaserWallet.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"}],\"name\":\"multiCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"result\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"operationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guardianToRemove\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevRecoveryOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryOwnerToRemove\",\"type\":\"address\"}],\"name\":\"removeRecoveryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"returnSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"simulateTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalGas\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"splitSigs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"}],\"name\":\"swapGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevRecoveryOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRecoveryOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldRecoveryOwner\",\"type\":\"address\"}],\"name\":\"swapRecoveryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockGuardians\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"name\":\"upgradeSingleton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Rodrigo Herrera I.\",\"errors\":{\"LW__exec__invalidNonce()\":[{\"details\":\"exec() custom errors.\"}],\"LW__init__notOwner()\":[{\"details\":\"init() custom error.\"}],\"LW__multiCall__notOwner()\":[{\"details\":\"multiCall() custom error.\"}],\"LW__simulateTransaction__invalidNonce()\":[{\"details\":\"simulateTransaction() custom errors.\"}],\"LW__verifySignatures__invalidSignatureLength()\":[{\"details\":\"verifySignatures() custom errors.\"}],\"LaserWallet__invalidSignature()\":[{\"details\":\"isValidSignature() Laser custom error.\"}],\"Owner__changeOwner__invalidOwnerAddress()\":[{\"details\":\"changeOwner() custom error.\"}],\"Owner__initOwner__walletInitialized()\":[{\"details\":\"initOwner() custom errors.\"}],\"SSR__access__guardiansLocked()\":[{\"details\":\"access() custom errors.\"}],\"SSR__addGuardian__invalidAddress()\":[{\"details\":\"addGuardian() custom errors.\"}],\"SSR__addRecoveryOwner__invalidAddress()\":[{\"details\":\"addRecoveryOwner() custom error.\"}],\"SSR__initGuardians__underflow()\":[{\"details\":\"initGuardians() custom errors.\"}],\"SSR__initRecoveryOwners__underflow()\":[{\"details\":\"initRecoveryOwners() custom error.\"}],\"SSR__removeGuardian__underflow()\":[{\"details\":\"removeGuardian() custom errors.\"}],\"SSR__removeRecoveryOwner__underflow()\":[{\"details\":\"removeRecoveryOwner() custom errors.\"}],\"SSR__swapGuardian__invalidPrevGuardian()\":[{\"details\":\"swapRecoveryOwner() custom errors.\"}],\"SSR__swapRecoveryOwner__invalidPrevRecoveryOwner()\":[{\"details\":\"swapRecoveryOwner() custom errors.\"}],\"SSR__validateRecoveryOwner__notAuthorized()\":[{\"details\":\"validateRecoveryOwner() custom error.\"}],\"SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress()\":[{\"details\":\"verifyNewRecoveryOwnerOrGuardian() custom error.\"}],\"Singleton__upgradeSingleton__incorrectAddress()\":[{\"details\":\"upgradeSingleton() custom errors.\"}],\"Utils__returnSigner__invalidSignature()\":[{\"details\":\"returnSigner() custom error.\"}]},\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"details\":\"Adds a guardian to the wallet.\",\"params\":{\"newGuardian\":\"Address of the new guardian.\"}},\"addRecoveryOwner(address)\":{\"details\":\"Adds a recovery owner to the wallet.\",\"params\":{\"newRecoveryOwner\":\"Address of the new recovery owner.\"}},\"changeOwner(address)\":{\"details\":\"Changes the owner of the wallet.\",\"params\":{\"newOwner\":\"The address of the new owner.\"}},\"domainSeparator()\":{\"details\":\"Returns the domain separator of this.\"},\"exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)\":{\"details\":\"Executes a generic transaction. It does not support 'delegatecall' for security reasons.\",\"params\":{\"_nonce\":\"Unsigned integer to avoid replay attacks. It needs to match the current wallet's nonce.\",\"callData\":\"Data payload for the transaction.\",\"gasLimit\":\"The transaction's gas limit. It needs to be the same as the actual transaction gas limit.\",\"maxFeePerGas\":\"Maximum amount that the user is willing to pay for a unit of gas.\",\"maxPriorityFeePerGas\":\"Miner's tip.\",\"relayer\":\"Address that forwards the transaction so it abstracts away the gas costs.\",\"signatures\":\"The signatures of the transaction.\",\"to\":\"Destination address.\",\"value\":\"Amount to send.\"}},\"getChainId()\":{\"returns\":{\"chainId\":\"The chain id of this.\"}},\"getGuardians()\":{\"returns\":{\"_0\":\"Array of the guardians of this wallet.\"}},\"getRecoveryOwners()\":{\"returns\":{\"_0\":\"Array of the recovery owners of this wallet.\"}},\"init(address,address[],address[],uint256,uint256,uint256,address,bytes)\":{\"details\":\"Setup function, sets initial storage of contract.\",\"params\":{\"_guardians\":\"Addresses that can activate the social recovery mechanism.\",\"_owner\":\"The owner of the wallet.\",\"_recoveryOwners\":\"Array of recovery owners. Implementation of Sovereign Social Recovery.\"}},\"isGuardian(address)\":{\"params\":{\"guardian\":\"Requested address.\"},\"returns\":{\"_0\":\"Boolean if the address is a guardian of the current wallet.\"}},\"isRecoveryOwner(address)\":{\"params\":{\"recoveryOwner\":\"Requested address.\"},\"returns\":{\"_0\":\"Boolean if the address is a recovery owner of the current wallet.\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Implementation of EIP 1271: https://eips.ethereum.org/EIPS/eip-1271.\",\"params\":{\"hash\":\"Hash of a message signed on behalf of address(this).\",\"signature\":\"Signature byte array associated with _msgHash.\"},\"returns\":{\"_0\":\"Magic value  or reverts with an error message.\"}},\"lock()\":{\"details\":\"Locks the wallet. Can only be called by a guardian.\"},\"multiCall((address,uint256,bytes)[])\":{\"details\":\"Executes a series of generic transactions. It can only be called from exec.\",\"params\":{\"transactions\":\"Basic transactions array (to, value, calldata).\"}},\"operationHash(address,uint256,bytes,uint256,uint256,uint256,uint256)\":{\"details\":\"The transaction's hash. This is necessary to check that the signatures are correct and to avoid replay attacks.\"},\"recover(address)\":{\"details\":\"Can only recover with the signature of a recovery owner and guardian.\",\"params\":{\"newOwner\":\"The new owner address. This is generated instantaneously.\"}},\"recoveryUnlock()\":{\"details\":\"Unlocks the wallet. Can only be called by the owner + a recovery owner. This is to avoid the wallet being locked forever if a guardian misbehaves. The guardians will be locked until the owner decides otherwise.\"},\"removeGuardian(address,address)\":{\"details\":\"Removes a guardian from the wallet.\",\"params\":{\"guardianToRemove\":\"Address of the guardian to be removed.\",\"prevGuardian\":\"Address of the previous guardian in the linked list.\"}},\"removeRecoveryOwner(address,address)\":{\"details\":\"Removes a recovery owner  to the wallet.\",\"params\":{\"prevRecoveryOwner\":\"Address of the previous recovery owner in the linked list.\",\"recoveryOwnerToRemove\":\"Address of the recovery owner to be removed.\"}},\"returnSigner(bytes32,bytes32,bytes32,uint8,bytes)\":{\"details\":\"Returns the signer of the hash.\",\"params\":{\"dataHash\":\"The hash that was signed.\"}},\"simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)\":{\"details\":\"Simulates a transaction. This should be called from the relayer, to verify that the transaction will not revert. This does not guarantees 100% that the transaction will succeed, the state will be different next block.\"},\"splitSigs(bytes,uint256)\":{\"details\":\"Returns the r, s and v of the signature.\",\"params\":{\"pos\":\"Which signature to read.\",\"signatures\":\"Signature.\"}},\"swapGuardian(address,address,address)\":{\"details\":\"Swaps a guardian for a new address.\",\"params\":{\"newGuardian\":\"The address of the new guardian.\",\"oldGuardian\":\"The address of the current guardian to be swapped by the new one.\",\"prevGuardian\":\"The address of the previous guardian in the link list.\"}},\"swapRecoveryOwner(address,address,address)\":{\"details\":\"Swaps a recovery owner for a new address.\",\"params\":{\"newRecoveryOwner\":\"The address of the new recovery owner.\",\"oldRecoveryOwner\":\"The address of the current recovery owner to be swapped by the new one.\",\"prevRecoveryOwner\":\"The address of the previous owner in the link list.\"}},\"unlock()\":{\"details\":\"Unlocks the wallet. Can only be called by a guardian + the owner.\"},\"unlockGuardians()\":{\"details\":\"Unlocks the guardians. Can only be called by the owner.\"},\"upgradeSingleton(address)\":{\"details\":\"Migrates to a new singleton (implementation).\",\"params\":{\"_singleton\":\"New implementation address.\"}}},\"title\":\"LaserWallet - EVM based smart contract wallet. Implementes smart social recovery mechanism.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGuardian(address)\":{\"notice\":\"Can only be called by the owner.\"},\"addRecoveryOwner(address)\":{\"notice\":\"Can only be called by the owner.\"},\"domainSeparator()\":{\"notice\":\"This is done to avoid replay attacks.\"},\"exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)\":{\"notice\":\"If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses. It is the relayer's responsability to make sure that they are the same, the user does not get affected if a mistake is made. We prefer to prioritize the user's safety (not overpay) over the relayer.\"},\"init(address,address[],address[],uint256,uint256,uint256,address,bytes)\":{\"notice\":\"It can't be called after initialization.\"},\"removeGuardian(address,address)\":{\"notice\":\"Can only be called by the owner.\"},\"removeRecoveryOwner(address,address)\":{\"notice\":\"Can only be called by the owner.\"},\"simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)\":{\"notice\":\"cNeeds to be called off-chain from  address zero.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaserWallet.sol\":\"LaserWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/LaserWallet.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"./core/Singleton.sol\\\";\\nimport \\\"./handlers/Handler.sol\\\";\\nimport \\\"./interfaces/ILaserWallet.sol\\\";\\nimport \\\"./ssr/SSR.sol\\\";\\n\\n/**\\n * @title LaserWallet - EVM based smart contract wallet. Implementes smart social recovery mechanism.\\n * @author Rodrigo Herrera I.\\n */\\ncontract LaserWallet is ILaserWallet, Singleton, SSR, Handler {\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n\\n    bytes32 private constant LASER_TYPE_STRUCTURE =\\n        keccak256(\\n            \\\"LaserOperation(address to,uint256 value,bytes callData,uint256 nonce,uint256 maxFeePerGas,uint256 maxPriorityFeePerGas,uint256 gasLimit)\\\"\\n        );\\n\\n    bytes4 private constant EIP1271_MAGIC_VALUE = bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"));\\n\\n    uint256 public nonce;\\n\\n    constructor() {\\n        // This makes the singleton unusable. e.g. (parity wallet hack).\\n        owner = address(this);\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @dev Setup function, sets initial storage of contract.\\n     * @param _owner The owner of the wallet.\\n     * @param _recoveryOwners Array of recovery owners. Implementation of Sovereign Social Recovery.\\n     * @param _guardians Addresses that can activate the social recovery mechanism.\\n     * @notice It can't be called after initialization.\\n     */\\n    function init(\\n        address _owner,\\n        address[] calldata _recoveryOwners,\\n        address[] calldata _guardians,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes calldata ownerSignature\\n    ) external {\\n        // initOwner() requires that the current owner is address 0.\\n        // This is enough to protect init() from being called after initialization.\\n        initOwner(_owner);\\n\\n        // We initialize the guardians ...\\n        initGuardians(_guardians);\\n\\n        // We initialize the recovery owners ...\\n        initRecoveryOwners(_recoveryOwners);\\n\\n        {\\n            // Scope to avoid stack too deep ...\\n\\n            bytes32 signedHash = keccak256(abi.encodePacked(maxFeePerGas, maxPriorityFeePerGas, gasLimit));\\n\\n            (bytes32 r, bytes32 s, uint8 v) = splitSigs(ownerSignature, 0);\\n\\n            address signer = returnSigner(signedHash, r, s, v, ownerSignature);\\n\\n            //@todo Optimize this.\\n            if (signer != _owner) revert LW__init__notOwner();\\n        }\\n\\n        if (gasLimit > 0) {\\n            // If gas limit is greater than 0, then the transaction was sent through a relayer.\\n            // We calculate the gas price, as per the user's request ...\\n            uint256 gasPrice = calculateGasPrice(maxFeePerGas, maxPriorityFeePerGas);\\n\\n            // gasUsed is the total amount of gas consumed for this transaction.\\n            // This is contemplating the initial callData cost, the main transaction,\\n            // and we add the surplus for what is left (refund the relayer).\\n            uint256 gasUsed = gasLimit - gasleft() + 7000;\\n            uint256 refundAmount = gasUsed * gasPrice;\\n\\n            // We refund the relayer ...\\n            bool success = _call(relayer == address(0) ? tx.origin : relayer, refundAmount, new bytes(0), gasleft());\\n\\n            // If the transaction returns false, we revert ...\\n            if (!success) revert LW__init__refundFailure();\\n        }\\n\\n        emit Setup(_owner, _recoveryOwners, _guardians);\\n    }\\n\\n    /**\\n     * @dev Executes a generic transaction. It does not support 'delegatecall' for security reasons.\\n     * @param to Destination address.\\n     * @param value Amount to send.\\n     * @param callData Data payload for the transaction.\\n     * @param _nonce Unsigned integer to avoid replay attacks. It needs to match the current wallet's nonce.\\n     * @param maxFeePerGas Maximum amount that the user is willing to pay for a unit of gas.\\n     * @param maxPriorityFeePerGas Miner's tip.\\n     * @param gasLimit The transaction's gas limit. It needs to be the same as the actual transaction gas limit.\\n     * @param relayer Address that forwards the transaction so it abstracts away the gas costs.\\n     * @param signatures The signatures of the transaction.\\n     * @notice If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.\\n     * It is the relayer's responsability to make sure that they are the same, the user does not get affected if a mistake is made.\\n     * We prefer to prioritize the user's safety (not overpay) over the relayer.\\n     */\\n    function exec(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes calldata signatures\\n    ) external {\\n        // We immediately increase the nonce to avoid replay attacks.\\n        unchecked {\\n            if (nonce++ != _nonce) revert LW__exec__invalidNonce();\\n        }\\n\\n        // Verifies the correctness of the transaction. It checks that the signatures are\\n        // correct and that the signer has access for the transaction.\\n        verifyTransaction(to, value, callData, _nonce, maxFeePerGas, maxPriorityFeePerGas, gasLimit, signatures);\\n\\n        // Once we verified that the transaction is correct, we execute the main call.\\n        // We subtract 10_000 to have enough gas to complete the function.\\n        bool success = _call(to, value, callData, gasleft() - 10000);\\n\\n        // We do not revert the call if it fails, because the wallet needs to pay the relayer even in case of failure.\\n        if (success) emit ExecSuccess(to, value, nonce);\\n        else emit ExecFailure(to, value, nonce);\\n\\n        // We calculate the gas price, as per the user's request ...\\n        uint256 gasPrice = calculateGasPrice(maxFeePerGas, maxPriorityFeePerGas);\\n\\n        // gasUsed is the total amount of gas consumed for this transaction.\\n        // This is contemplating the initial callData cost, the main transaction,\\n        // and we add the surplus for what is left (refund the relayer).\\n        uint256 gasUsed = gasLimit - gasleft() + 7000;\\n\\n        uint256 refundAmount = gasUsed * gasPrice;\\n\\n        // We refund the relayer ...\\n        success = _call(relayer == address(0) ? tx.origin : relayer, refundAmount, new bytes(0), gasleft());\\n\\n        // If the transaction returns false, we revert ..\\n        if (!success) revert LW__exec__refundFailure();\\n    }\\n\\n    /**\\n     * @dev Executes a series of generic transactions. It can only be called from exec.\\n     * @param transactions Basic transactions array (to, value, calldata).\\n     */\\n    function multiCall(Transaction[] calldata transactions) external onlyMe {\\n        uint256 transactionsLength = transactions.length;\\n        for (uint256 i = 0; i < transactionsLength; ) {\\n            Transaction calldata transaction = transactions[i];\\n\\n            // We get the actual function selector to determine access ...\\n            bytes4 funcSelector = bytes4(transaction.callData);\\n\\n            // access() checks if the wallet is locked for the owner or guardians and returns who has access ...\\n            Access access = access(funcSelector);\\n\\n            // Only the owner is allowed to trigger a multiCall.\\n            // The signatures were already verified in 'exec', here we just need to make sure that access == owner.\\n            if (access != Access.Owner) revert LW__multiCall__notOwner();\\n\\n            bool success = _call(transaction.to, transaction.value, transaction.callData, gasleft());\\n\\n            // We do not revert the call if it fails, because the wallet needs to pay the relayer even in case of failure.\\n            (success);\\n\\n            //@todo Return the success transactions and return data in an array.\\n\\n            unchecked {\\n                // Won't overflow .... You would need way more gas usage than current available block gas (30m) to overflow it.\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**c\\n     * @dev Simulates a transaction. This should be called from the relayer, to verify that the transaction will not revert.\\n     * This does not guarantees 100% that the transaction will succeed, the state will be different next block.\\n     * @notice Needs to be called off-chain from  address zero.\\n     */\\n    function simulateTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes calldata signatures\\n    ) external returns (uint256 totalGas) {\\n        if (nonce++ != _nonce) revert LW__simulateTransaction__invalidNonce();\\n        verifyTransaction(to, value, callData, _nonce, maxFeePerGas, maxPriorityFeePerGas, gasLimit, signatures);\\n        bool success = _call(to, value, callData, gasleft());\\n        if (!success) revert LW__simulateTransaction__mainCallError();\\n        uint256 gasPrice = calculateGasPrice(maxFeePerGas, maxPriorityFeePerGas);\\n        uint256 gasUsed = gasLimit - gasleft() + 7000;\\n        uint256 refundAmount = gasUsed * gasPrice;\\n        success = _call(msg.sender, refundAmount, new bytes(0), gasleft());\\n        if (!success) revert LW__simulateTransaction__refundFailure();\\n        totalGas = gasLimit - gasleft();\\n        require(msg.sender == address(0), \\\"Must be called off-chain from address zero.\\\");\\n    }\\n\\n    /**\\n     * @dev The transaction's hash. This is necessary to check that the signatures are correct and to avoid replay attacks.\\n     */\\n    function operationHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit\\n    ) external view returns (bytes32) {\\n        return keccak256(encodeOperation(to, value, callData, _nonce, maxFeePerGas, maxPriorityFeePerGas, gasLimit));\\n    }\\n\\n    /**\\n     * @dev Implementation of EIP 1271: https://eips.ethereum.org/EIPS/eip-1271.\\n     * @param hash Hash of a message signed on behalf of address(this).\\n     * @param signature Signature byte array associated with _msgHash.\\n     * @return Magic value  or reverts with an error message.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4) {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        (r, s, v) = splitSigs(signature, 0);\\n        address recovered = returnSigner(hash, r, s, v, signature);\\n\\n        // The guardians and recovery owners should not be able to sign transactions that are out of scope from this wallet.\\n        // Only the owner should be able to sign external data.\\n        if (recovered != owner) revert LaserWallet__invalidSignature();\\n        return EIP1271_MAGIC_VALUE;\\n    }\\n\\n    /**\\n     * @return chainId The chain id of this.\\n     */\\n    function getChainId() public view returns (uint256 chainId) {\\n        return block.chainid;\\n    }\\n\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Verifies that the transaction is correct (signatures match the parameters).\\n     */\\n    function verifyTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes calldata signatures\\n    ) internal view {\\n        // We encode the transaction data.\\n        bytes memory encodedData = encodeOperation(\\n            to,\\n            value,\\n            callData,\\n            _nonce,\\n            maxFeePerGas,\\n            maxPriorityFeePerGas,\\n            gasLimit\\n        );\\n\\n        // Now we hash it ...\\n        bytes32 dataHash = keccak256(encodedData);\\n\\n        // We get the actual function selector to determine access ...\\n        bytes4 funcSelector = bytes4(callData);\\n\\n        // access() checks if the wallet is locked for the owner or guardians and returns who has access ...\\n        Access access = access(funcSelector);\\n\\n        // We verify that the signatures are correct depending on the transaction type ...\\n        verifySignatures(access, dataHash, signatures);\\n    }\\n\\n    /**\\n     * @dev Verifies that the signature(s) match the transaction type and sender.\\n     * @param _access Who has permission to invoke this transaction.\\n     * @param dataHash The keccak256 has of the transaction's data playload.\\n     * @param signatures The signature(s) of the hash.\\n     */\\n    function verifySignatures(\\n        Access _access,\\n        bytes32 dataHash,\\n        bytes calldata signatures\\n    ) internal view {\\n        // If it is the owner or guardian, then only 1 signature is required.\\n        // For all other operations, 2 signatures are required.\\n        uint256 requiredSignatures = _access == Access.Owner || _access == Access.Guardian ? 1 : 2;\\n\\n        if (signatures.length < requiredSignatures * 65) revert LW__verifySignatures__invalidSignatureLength();\\n\\n        address signer;\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        for (uint256 i = 0; i < requiredSignatures; ) {\\n            (r, s, v) = splitSigs(signatures, i);\\n\\n            signer = returnSigner(dataHash, r, s, v, signatures);\\n\\n            if (_access == Access.Owner) {\\n                // If access == owner, the signer needs to be the owner.\\n\\n                // We do not need further checks e.g 'is the wallet locked', they were done in 'access'.\\n                if (owner != signer) revert LW__verifySignatures__notOwner();\\n            } else if (_access == Access.Guardian) {\\n                // If access == guardian, the signer needs to be a guardian.\\n\\n                // The guardian by itself can only lock the wallet, additional checks were done in 'access'.\\n                if (guardians[signer] == address(0)) revert LW__verifySignatures__notGuardian();\\n            } else if (_access == Access.OwnerAndGuardian) {\\n                // If access == owner and guardian, the first signer needs to be the owner.\\n                if (i == 0) {\\n                    // The first signer needs to be the owner.\\n                    if (owner != signer) revert LW__verifySignatures__notOwner();\\n                } else {\\n                    // The second signer needs to be a guardian.\\n                    if (guardians[signer] == address(0)) revert LW__verifySignatures__notGuardian();\\n                }\\n            } else if (_access == Access.RecoveryOwnerAndGuardian) {\\n                // If access == recovery owner and guardian, the first signer needs to be the recovery owner.\\n\\n                // We do not need further checks, they were done in 'access'.\\n                if (i == 0) {\\n                    // The first signer needs to be a recovery owner.\\n\\n                    // validateRecoveryOwner() handles all the necessary checks.\\n                    validateRecoveryOwner(signer);\\n                } else {\\n                    // The second signer needs to be a guardian.\\n                    if (guardians[signer] == address(0)) revert LW__verifySignatures__notGuardian();\\n                }\\n            } else if (_access == Access.OwnerAndRecoveryOwner) {\\n                // If access == owner and recovery owner, the first signer needs to be the owner.\\n\\n                if (i == 0) {\\n                    if (owner != signer) revert LW__verifySignatures__notOwner();\\n                } else {\\n                    // The second signer needs to be the recovery owner.\\n\\n                    // validateRecoveryOwner() handles all the necessary checks.\\n                    validateRecoveryOwner(signer);\\n                }\\n            } else {\\n                // This else statement should never reach.\\n                revert();\\n            }\\n\\n            unchecked {\\n                // Won't overflow ...\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function encodeOperation(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit\\n    ) internal view returns (bytes memory) {\\n        bytes32 opHash = keccak256(\\n            abi.encode(\\n                LASER_TYPE_STRUCTURE,\\n                to,\\n                value,\\n                keccak256(callData),\\n                _nonce,\\n                maxFeePerGas,\\n                maxPriorityFeePerGas,\\n                gasLimit\\n            )\\n        );\\n\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), opHash);\\n    }\\n}\\n\",\"keccak256\":\"0x954db1819ab78583b1f6b76a8465a6dbfcaf274548d3cce7a7a36938a76b9f3d\",\"license\":\"LGPL-3.0-only\"},\"contracts/core/Me.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Me - Only address(this) can perform certain operations.\\n */\\ncontract Me {\\n    error Me__notMe();\\n\\n    modifier onlyMe() {\\n        if (msg.sender != address(this)) revert Me__notMe();\\n\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5374439170279e0adff839d85bd9daab3ce894fc7e2c529d9f449a74d4450daa\",\"license\":\"LGPL-3.0-only\"},\"contracts/core/Owner.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IOwner.sol\\\";\\nimport \\\"./Me.sol\\\";\\n\\n/**\\n * @title Owner\\n * @notice Handles the owners addresses.\\n */\\ncontract Owner is IOwner, Me {\\n    ///@dev owner should always bet at storage slot 1.\\n    address public owner;\\n\\n    /**\\n     * @dev Changes the owner of the wallet.\\n     * @param newOwner The address of the new owner.\\n     */\\n    function changeOwner(address newOwner) external onlyMe {\\n        if (newOwner.code.length != 0 || newOwner == address(0) || newOwner == owner) {\\n            revert Owner__changeOwner__invalidOwnerAddress();\\n        }\\n        assembly {\\n            // We store the owner at storage slot 1 through inline assembly to save some gas and to be very explicit about slot positions.\\n            sstore(1, newOwner)\\n        }\\n        emit OwnerChanged(newOwner);\\n    }\\n\\n    /**\\n     * @dev Inits the owner. This can only be called at creation.\\n     * @param _owner The owner of the wallet.\\n     */\\n    function initOwner(address _owner) internal {\\n        // If owner is not address 0, the wallet was already initialized ...\\n        if (owner != address(0)) revert Owner__initOwner__walletInitialized();\\n\\n        if (_owner.code.length != 0 || _owner == address(0)) revert Owner__initOwner__invalidOwnerAddress();\\n\\n        assembly {\\n            // We store the owner at storage slot 1 through inline assembly to save some gas and to be very explicit about slot positions.\\n            sstore(1, _owner)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23f42a43837e39668ea6c223478c6c2afa459b17fe7bd52998a48e34cc1aa250\",\"license\":\"LGPL-3.0-only\"},\"contracts/core/Singleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\nimport \\\"../interfaces/ISingleton.sol\\\";\\nimport \\\"./Me.sol\\\";\\n\\n/**\\n * @title Singleton - Master copy contract. \\n */\\ncontract Singleton is ISingleton, Me {\\n    ///@dev Singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    /// It should also always be ensured that the address is stored alone (uses a full word).\\n    address public singleton;\\n\\n    /**\\n     * @dev Migrates to a new singleton (implementation).\\n     * @param _singleton New implementation address.\\n     */\\n    function upgradeSingleton(address _singleton) external onlyMe {\\n        if (_singleton == address(this)) revert Singleton__upgradeSingleton__incorrectAddress();\\n\\n        if (!IERC165(_singleton).supportsInterface(0xae029e0b)) {\\n            //bytes4(keccak256(\\\"I_AM_LASER\\\")))\\n            revert Singleton__upgradeSingleton__notLaser();\\n        } else {\\n            assembly {\\n                // We store the singleton at storage slot 0 through inline assembly to save some gas and to be very explicit about slot positions.\\n                sstore(0, _singleton)\\n            }\\n            emit SingletonChanged(_singleton);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74abd3473dedafea7071c1542a72496190de5269b1347e8788dd90a00110f19f\",\"license\":\"LGPL-3.0-only\"},\"contracts/handlers/Handler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IHandler.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title TokenHandler - Supports token callbacks.\\n */\\ncontract Handler is IHandler, IERC165 {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure returns (bytes4 result) {\\n        return 0xbc197c81;\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure {}\\n\\n    function supportsInterface(bytes4 _interfaceId) external pure returns (bool) {\\n        return\\n            _interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165\\n            _interfaceId == 0x1626ba7e || // EIP 1271\\n            _interfaceId == 0xd9b67a26 || // ERC165 interface ID for ERC1155\\n            _interfaceId == 0x4e2312e0 || // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\")) ^bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`).\\n            _interfaceId == 0xae029e0b || // Laser Wallet contract: bytes4(keccak256(\\\"I_AM_LASER\\\"))\\n            _interfaceId == 0x150b7a02; // ERC721 onErc721Received\\n    }\\n}\\n\",\"keccak256\":\"0x53d4ff09663e5854401ef84017834591ae02a3165c1c9773ecf1374c5a236587\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEIP1271.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IEIP1271\\n * @notice Interface to call external contracts to validate signature.\\n */\\ninterface IEIP1271 {\\n    /**\\n     * @dev Implementation of EIP 1271: https://eips.ethereum.org/EIPS/eip-1271.\\n     * @param hash Hash of a message signed on behalf of address(this).\\n     * @param signature Signature byte array associated with _msgHash.\\n     * @return Magic value  or reverts with an error message.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xfcc98243eaf0e10b323a21e6aca691efec6f128e938f24e495e71cd47c421505\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IERC165\\n * @notice Support of ERC165.\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param interfaceID The interface identifier, as specified in ERC-165\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas.\\n     * @return `true` if the contract implements `interfaceID` and\\n     * interfaceID` is not 0xffffffff, `false` otherwise\\n     */\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdf3ddac29884e2c1f2d2fd322bacd6a6907721d3e0909af74cdedeac5c38a9f4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IHandler.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IHandler\\n * @notice Has all the external functions for Handler.sol.\\n */\\ninterface IHandler {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4);\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4 result);\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure returns (bytes4 result);\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure;\\n}\\n\",\"keccak256\":\"0x894c6f39829580da16da3714121ce8913d6fce78dfee658c546eef14850e37fc\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ILaserWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ILaserWallet\\n * @author Rodrigo Herrera I.\\n * @notice Has all the external functions, structs, events and errors for LaserWallet.sol.\\n */\\ninterface ILaserWallet {\\n    struct Transaction {\\n        address to;\\n        uint256 value;\\n        bytes callData;\\n    }\\n\\n    event Received(address indexed sender, uint256 amount);\\n    event Setup(address owner, address[] recoveryOwners, address[] guardians);\\n    event ExecSuccess(address to, uint256 value, uint256 nonce);\\n    event ExecFailure(address to, uint256 value, uint256 nonce);\\n\\n    ///@dev init() custom error.\\n    error LW__init__notOwner();\\n    error LW__init__refundFailure();\\n\\n    ///@dev exec() custom errors.\\n    error LW__exec__invalidNonce();\\n    error LW__exec__refundFailure();\\n\\n    ///@dev multiCall() custom error.\\n    error LW__multiCall__notOwner();\\n\\n    ///@dev simulateTransaction() custom errors.\\n    error LW__simulateTransaction__invalidNonce();\\n    error LW__simulateTransaction__mainCallError();\\n    error LW__simulateTransaction__refundFailure();\\n\\n    ///@dev isValidSignature() Laser custom error.\\n    error LaserWallet__invalidSignature();\\n\\n    ///@dev verifySignatures() custom errors.\\n    error LW__verifySignatures__invalidSignatureLength();\\n    error LW__verifySignatures__notOwner();\\n    error LW__verifySignatures__notGuardian();\\n\\n    /**\\n     * @dev Setup function, sets initial storage of contract.\\n     * @param _owner The owner of the wallet.\\n     * @param _recoveryOwners Array of recovery owners. Implementation of Sovereign Social Recovery.\\n     * @param _guardians Addresses that can activate the social recovery mechanism.\\n     * @notice It can't be called after initialization.\\n     */\\n    function init(\\n        address _owner,\\n        address[] calldata _recoveryOwners,\\n        address[] calldata _guardians,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes calldata ownerSignature\\n    ) external;\\n\\n    /**\\n     * @dev Executes a generic transaction. It does not support 'delegatecall' for security reasons.\\n     * @param to Destination address.\\n     * @param value Amount to send.\\n     * @param callData Data payload for the transaction.\\n     * @param _nonce Unsigned integer to avoid replay attacks. It needs to match the current wallet's nonce.\\n     * @param maxFeePerGas Maximum amount that the user is willing to pay for a unit of gas.\\n     * @param maxPriorityFeePerGas Miner's tip.\\n     * @param gasLimit The transaction's gas limit. It needs to be the same as the actual transaction gas limit.\\n     * @param signatures The signatures of the transaction.\\n     * @notice If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses.\\n     * It is the relayer's responsability to make sure that they are the same, the user does not get affected if a mistake is made.\\n     * We prefer to prioritize the user's safety (not overpay) over the relayer.\\n     */\\n    function exec(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        address relayer,\\n        bytes calldata signatures\\n    ) external;\\n\\n    /**\\n     * @dev Executes a series of generic transactions. It can only be called from exec.\\n     * @param transactions Basic transactions array (to, value, calldata).\\n     */\\n    function multiCall(Transaction[] calldata transactions) external;\\n\\n    /**\\n     * @dev Simulates a transaction. This should be called from the relayer, to verify that the transaction will not revert.\\n     * This does not guarantees 100% that the transaction will succeed, the state will be different next block.\\n     * @notice Needs to be called off-chain from  address zero.\\n     */\\n    function simulateTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit,\\n        bytes calldata signatures\\n    ) external returns (uint256 totalGas);\\n\\n    /**\\n     * @dev The transaction's hash. This is necessary to check that the signatures are correct and to avoid replay attacks.\\n     */\\n    function operationHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata callData,\\n        uint256 _nonce,\\n        uint256 maxFeePerGas,\\n        uint256 maxPriorityFeePerGas,\\n        uint256 gasLimit\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @dev Implementation of EIP 1271: https://eips.ethereum.org/EIPS/eip-1271.\\n     * @param hash Hash of a message signed on behalf of address(this).\\n     * @param signature Signature byte array associated with _msgHash.\\n     * @return Magic value  or reverts with an error message.\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external returns (bytes4);\\n\\n    /**\\n     * @dev Returns the chain id of this.\\n     */\\n    function getChainId() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator of this.\\n     * @notice This is done to avoid replay attacks.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa7bb8fd675211e41a3be02d25e28ba498f4cf7dfe02522a31b2f7bf0d95a6ffa\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOwner.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IOwner\\n * @notice Has all the external functions, events and errors for Owner.sol.\\n */\\ninterface IOwner {\\n    event OwnerChanged(address newOwner);\\n\\n    ///@dev changeOwner() custom error.\\n    error Owner__changeOwner__invalidOwnerAddress();\\n\\n    ///@dev initOwner() custom errors.\\n    error Owner__initOwner__walletInitialized();\\n    error Owner__initOwner__invalidOwnerAddress();\\n\\n    /**\\n     * @dev Changes the owner of the wallet.\\n     * @param newOwner The address of the new owner.\\n     */\\n    function changeOwner(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x9c3c9df58c6ee966305dd5a18ca54a3e9a9dc0a06db6abba0f7b1be40ddfc7e3\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISSR.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ISSR\\n * @notice Has all the external functions, structs, events and errors for SSR.sol.\\n */\\ninterface ISSR {\\n    ///@dev Determines who has access to call a specific function.\\n    enum Access {\\n        Owner,\\n        Guardian,\\n        OwnerAndGuardian,\\n        RecoveryOwnerAndGuardian,\\n        OwnerAndRecoveryOwner\\n    }\\n\\n    event WalletLocked();\\n    event WalletUnlocked();\\n    event RecoveryUnlocked();\\n    event NewGuardian(address newGuardian);\\n    event GuardianRemoved(address removedGuardian);\\n    event GuardianSwapped(address newGuardian, address oldGuardian);\\n    event NewRecoveryOwner(address newRecoveryOwner);\\n    event RecoveryOwnerRemoved(address removedRecoveryOwner);\\n    event RecoveryOwnerSwapped(address newRecoveryOwner, address oldRecoveryOwner);\\n    event WalletRecovered(address newOwner);\\n\\n    ///@dev addGuardian() custom errors.\\n    error SSR__addGuardian__invalidAddress();\\n\\n    ///@dev removeGuardian() custom errors.\\n    error SSR__removeGuardian__underflow();\\n    error SSR__removeGuardian__invalidAddress();\\n    error SSR__removeGuardian__incorrectPreviousGuardian();\\n\\n    ///@dev swapRecoveryOwner() custom errors.\\n    error SSR__swapGuardian__invalidPrevGuardian();\\n    error SSR__swapGuardian__invalidOldGuardian();\\n\\n    ///@dev addRecoveryOwner() custom error.\\n    error SSR__addRecoveryOwner__invalidAddress();\\n\\n    ///@dev removeRecoveryOwner() custom errors.\\n    error SSR__removeRecoveryOwner__underflow();\\n    error SSR__removeRecoveryOwner__invalidAddress();\\n    error SSR__removeRecoveryOwner__incorrectPreviousRecoveryOwner();\\n\\n    ///@dev swapRecoveryOwner() custom errors.\\n    error SSR__swapRecoveryOwner__invalidPrevRecoveryOwner();\\n    error SSR__swapRecoveryOwner__invalidOldRecoveryOwner();\\n\\n    ///@dev initRecoveryOwners() custom error.\\n    error SSR__initRecoveryOwners__underflow();\\n    error SSR__initRecoveryOwners__invalidAddress();\\n\\n    ///@dev initGuardians() custom errors.\\n    error SSR__initGuardians__underflow();\\n    error SSR__initGuardians__invalidAddress();\\n\\n    ///@dev access() custom errors.\\n    error SSR__access__guardiansLocked();\\n    error SSR__access__walletLocked();\\n\\n    ///@dev validateRecoveryOwner() custom error.\\n    error SSR__validateRecoveryOwner__notAuthorized();\\n\\n    ///@dev verifyNewRecoveryOwnerOrGuardian() custom error.\\n    error SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress();\\n\\n    /**\\n     *\\u00a0@dev Locks the wallet. Can only be called by a guardian.\\n     */\\n    function lock() external;\\n\\n    /**\\n     * @dev Unlocks the wallet. Can only be called by a guardian + the owner.\\n     */\\n    function unlock() external;\\n\\n    /**\\n     * @dev Unlocks the wallet. Can only be called by the owner + a recovery owner.\\n     * This is to avoid the wallet being locked forever if a guardian misbehaves.\\n     * The guardians will be locked until the owner decides otherwise.\\n     */\\n    function recoveryUnlock() external;\\n\\n    /**\\n     * @dev Unlocks the guardians. Can only be called by the owner.\\n     */\\n    function unlockGuardians() external;\\n\\n    /**\\n     * @dev Can only recover with the signature of a recovery owner and guardian.\\n     * @param newOwner The new owner address. This is generated instantaneously.\\n     */\\n    function recover(address newOwner) external;\\n\\n    /**\\n     * @dev Adds a guardian to the wallet.\\n     * @param newGuardian Address of the new guardian.\\n     * @notice Can only be called by the owner.\\n     */\\n    function addGuardian(address newGuardian) external;\\n\\n    /**\\n     * @dev Removes a guardian to the wallet.\\n     * @param prevGuardian Address of the previous guardian in the linked list.\\n     * @param guardianToRemove Address of the guardian to be removed.\\n     * @notice Can only be called by the owner.\\n     */\\n    function removeGuardian(address prevGuardian, address guardianToRemove) external;\\n\\n    /**\\n     * @dev Swaps a guardian for a new address.\\n     * @param prevGuardian The address of the previous guardian in the link list.\\n     * @param newGuardian The address of the new guardian.\\n     * @param oldGuardian The address of the current guardian to be swapped by the new one.\\n     */\\n    function swapGuardian(\\n        address prevGuardian,\\n        address newGuardian,\\n        address oldGuardian\\n    ) external;\\n\\n    /**\\n     * @dev Adds a recovery owner to the wallet.\\n     * @param newRecoveryOwner Address of the new recovery owner.\\n     * @notice Can only be called by the owner.\\n     */\\n    function addRecoveryOwner(address newRecoveryOwner) external;\\n\\n    /**\\n     * @dev Removes a recovery owner  to the wallet.\\n     * @param prevRecoveryOwner Address of the previous recovery owner in the linked list.\\n     * @param recoveryOwnerToRemove Address of the recovery owner to be removed.\\n     * @notice Can only be called by the owner.\\n     */\\n    function removeRecoveryOwner(address prevRecoveryOwner, address recoveryOwnerToRemove) external;\\n\\n    /**\\n     * @dev Swaps a recovery owner for a new address.\\n     * @param prevRecoveryOwner The address of the previous owner in the link list.\\n     * @param newRecoveryOwner The address of the new recovery owner.\\n     * @param oldRecoveryOwner The address of the current recovery owner to be swapped by the new one.\\n     */\\n    function swapRecoveryOwner(\\n        address prevRecoveryOwner,\\n        address newRecoveryOwner,\\n        address oldRecoveryOwner\\n    ) external;\\n\\n    /**\\n     * @param guardian Requested address.\\n     * @return Boolean if the address is a guardian of the current wallet.\\n     */\\n    function isGuardian(address guardian) external view returns (bool);\\n\\n    /**\\n     * @param recoveryOwner Requested address.\\n     * @return Boolean if the address is a recovery owner of the current wallet.\\n     */\\n    function isRecoveryOwner(address recoveryOwner) external view returns (bool);\\n\\n    /**\\n     * @return Array of the guardians of this wallet.\\n     */\\n    function getGuardians() external view returns (address[] memory);\\n\\n    /**\\n     * @return Array of the recovery owners of this wallet.\\n     */\\n    function getRecoveryOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x0cac520b101c1d914bf126674ee862a0d3191bf0cf88b46b447ad220e47d6e4c\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/ISingleton.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title ISingleton\\n * @notice Has all the external functions, events and errors for Singleton.sol.\\n */\\n\\ninterface ISingleton {\\n    event SingletonChanged(address indexed newSingleton);\\n\\n    ///@dev upgradeSingleton() custom errors.\\n    error Singleton__upgradeSingleton__incorrectAddress();\\n    error Singleton__upgradeSingleton__notLaser();\\n\\n    /**\\n     * @dev Migrates to a new singleton (implementation).\\n     * @param singleton New implementation address.\\n     */\\n    function upgradeSingleton(address singleton) external;\\n}\\n\",\"keccak256\":\"0x9dc655cd1bdbf3a0ae04234e6e8d4cf90cc7c295eb3ee2474febd9709b90a73f\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/IUtils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IUtils\\n * @notice Has all the external functions and errors for Utils.sol.\\n */\\ninterface IUtils {\\n    ///@dev returnSigner() custom error.\\n    error Utils__returnSigner__invalidSignature();\\n    error Utils__returnSigner__invalidContractSignature();\\n\\n    /**\\n     * @dev Returns the signer of the hash.\\n     * @param dataHash The hash that was signed.\\n     */\\n    function returnSigner(\\n        bytes32 dataHash,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory signatures\\n    ) external view returns (address signer);\\n\\n    /**\\n     * @dev Returns the r, s and v of the signature.\\n     * @param signatures Signature.\\n     * @param pos Which signature to read.\\n     */\\n    function splitSigs(bytes memory signatures, uint256 pos)\\n        external\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        );\\n}\\n\",\"keccak256\":\"0x375054f71f454e8a13d55649851c6e8d65a92972526cdafff24421c7864489db\",\"license\":\"LGPL-3.0-only\"},\"contracts/ssr/SSR.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../core/Owner.sol\\\";\\nimport \\\"../interfaces/IEIP1271.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\nimport \\\"../interfaces/ISSR.sol\\\";\\nimport \\\"../utils/Utils.sol\\\";\\n\\n/**\\n * @title SSR - Smart Social Recovery\\n * @notice Laser's recovery mechanism.\\n * @author Rodrigo Herrera I.\\n */\\ncontract SSR is ISSR, Owner, Utils {\\n    ///@dev pointer address for the nested mapping.\\n    address internal constant pointer = address(0x1);\\n\\n    uint256 internal recoveryOwnerCount;\\n\\n    uint256 internal guardianCount;\\n\\n    uint256 public timeLock;\\n\\n    bool public isLocked;\\n\\n    ///@dev If guardians are locked, they cannot do any transaction.\\n    ///This is to completely prevent from guardians misbehaving.\\n    bool public guardiansLocked;\\n\\n    // Recovery owners in a link list.\\n    mapping(address => address) internal recoveryOwners;\\n\\n    // Guardians in a link list.\\n    mapping(address => address) internal guardians;\\n\\n    /**\\n     *\\u00a0@dev Locks the wallet. Can only be called by a guardian.\\n     */\\n    function lock() external onlyMe {\\n        timeLock = block.timestamp;\\n        isLocked = true;\\n        emit WalletLocked();\\n    }\\n\\n    /**\\n     * @dev Unlocks the wallet. Can only be called by a guardian + the owner.\\n     */\\n    function unlock() external onlyMe {\\n        timeLock = 0;\\n        isLocked = false;\\n        emit WalletUnlocked();\\n    }\\n\\n    /**\\n     * @dev Unlocks the wallet. Can only be called by the owner + a recovery owner.\\n     * This is to avoid the wallet being locked forever if a guardian misbehaves.\\n     * The guardians will be locked until the owner decides otherwise.\\n     */\\n    function recoveryUnlock() external onlyMe {\\n        isLocked = false;\\n        guardiansLocked = true;\\n        emit RecoveryUnlocked();\\n    }\\n\\n    /**\\n     * @dev Unlocks the guardians. Can only be called by the owner.\\n     */\\n    function unlockGuardians() external onlyMe {\\n        guardiansLocked = false;\\n    }\\n\\n    /**\\n     * @dev Can only recover with the signature of a recovery owner and guardian.\\n     * @param newOwner The new owner address. This is generated instantaneously.\\n     */\\n    function recover(address newOwner) external onlyMe {\\n        timeLock = 0;\\n        isLocked = false;\\n        owner = newOwner;\\n        emit WalletRecovered(newOwner);\\n    }\\n\\n    /**\\n     * @dev Adds a guardian to the wallet.\\n     * @param newGuardian Address of the new guardian.\\n     * @notice Can only be called by the owner.\\n     */\\n    function addGuardian(address newGuardian) external onlyMe {\\n        verifyNewRecoveryOwnerOrGuardian(newGuardian);\\n        guardians[newGuardian] = guardians[pointer];\\n        guardians[pointer] = newGuardian;\\n\\n        unchecked {\\n            // If this overflows, this bug would be the least of the problems ..\\n            ++guardianCount;\\n        }\\n        emit NewGuardian(newGuardian);\\n    }\\n\\n    /**\\n     * @dev Removes a guardian from the wallet.\\n     * @param prevGuardian Address of the previous guardian in the linked list.\\n     * @param guardianToRemove Address of the guardian to be removed.\\n     * @notice Can only be called by the owner.\\n     */\\n    function removeGuardian(address prevGuardian, address guardianToRemove) external onlyMe {\\n        // There needs to be at least 2 guardian ...\\n        if (guardianCount - 2 < 1) revert SSR__removeGuardian__underflow();\\n\\n        if (guardianToRemove == pointer) revert SSR__removeGuardian__invalidAddress();\\n\\n        if (guardians[prevGuardian] != guardianToRemove) revert SSR__removeGuardian__incorrectPreviousGuardian();\\n\\n        guardians[prevGuardian] = guardians[guardianToRemove];\\n        guardians[guardianToRemove] = address(0);\\n\\n        unchecked {\\n            // Can't underflow, there needs to be more than 2 guardians to reach here.\\n            --guardianCount;\\n        }\\n        emit GuardianRemoved(guardianToRemove);\\n    }\\n\\n    /**\\n     * @dev Swaps a guardian for a new address.\\n     * @param prevGuardian The address of the previous guardian in the link list.\\n     * @param newGuardian The address of the new guardian.\\n     * @param oldGuardian The address of the current guardian to be swapped by the new one.\\n     */\\n    function swapGuardian(\\n        address prevGuardian,\\n        address newGuardian,\\n        address oldGuardian\\n    ) external onlyMe {\\n        verifyNewRecoveryOwnerOrGuardian(newGuardian);\\n        if (guardians[prevGuardian] != oldGuardian) revert SSR__swapGuardian__invalidPrevGuardian();\\n\\n        if (oldGuardian == pointer) revert SSR__swapGuardian__invalidOldGuardian();\\n\\n        guardians[newGuardian] = guardians[oldGuardian];\\n        guardians[prevGuardian] = newGuardian;\\n        guardians[oldGuardian] = address(0);\\n        emit GuardianSwapped(newGuardian, oldGuardian);\\n    }\\n\\n    /**\\n     * @dev Adds a recovery owner to the wallet.\\n     * @param newRecoveryOwner Address of the new recovery owner.\\n     * @notice Can only be called by the owner.\\n     */\\n    function addRecoveryOwner(address newRecoveryOwner) external onlyMe {\\n        verifyNewRecoveryOwnerOrGuardian(newRecoveryOwner);\\n        recoveryOwners[newRecoveryOwner] = recoveryOwners[pointer];\\n        recoveryOwners[pointer] = newRecoveryOwner;\\n\\n        unchecked {\\n            // If this overflows, this bug would be the least of the problems ...\\n            ++recoveryOwnerCount;\\n        }\\n        emit NewRecoveryOwner(newRecoveryOwner);\\n    }\\n\\n    /**\\n     * @dev Removes a recovery owner  to the wallet.\\n     * @param prevRecoveryOwner Address of the previous recovery owner in the linked list.\\n     * @param recoveryOwnerToRemove Address of the recovery owner to be removed.\\n     * @notice Can only be called by the owner.\\n     */\\n    function removeRecoveryOwner(address prevRecoveryOwner, address recoveryOwnerToRemove) external onlyMe {\\n        // There needs to be at least 2 recovery owners ...\\n        if (recoveryOwnerCount - 1 < 2) revert SSR__removeRecoveryOwner__underflow();\\n\\n        if (recoveryOwnerToRemove == pointer) revert SSR__removeRecoveryOwner__invalidAddress();\\n\\n        if (recoveryOwners[prevRecoveryOwner] != recoveryOwnerToRemove) {\\n            revert SSR__removeRecoveryOwner__incorrectPreviousRecoveryOwner();\\n        }\\n\\n        recoveryOwners[prevRecoveryOwner] = recoveryOwners[recoveryOwnerToRemove];\\n        recoveryOwners[recoveryOwnerToRemove] = address(0);\\n\\n        unchecked {\\n            // Can't underflow, there needs to be more than 2 recovery owners to reach here.\\n            --recoveryOwnerCount;\\n        }\\n        emit RecoveryOwnerRemoved(recoveryOwnerToRemove);\\n    }\\n\\n    /**\\n     * @dev Swaps a recovery owner for a new address.\\n     * @param prevRecoveryOwner The address of the previous owner in the link list.\\n     * @param newRecoveryOwner The address of the new recovery owner.\\n     * @param oldRecoveryOwner The address of the current recovery owner to be swapped by the new one.\\n     */\\n    function swapRecoveryOwner(\\n        address prevRecoveryOwner,\\n        address newRecoveryOwner,\\n        address oldRecoveryOwner\\n    ) external onlyMe {\\n        verifyNewRecoveryOwnerOrGuardian(newRecoveryOwner);\\n        if (recoveryOwners[prevRecoveryOwner] != oldRecoveryOwner) {\\n            revert SSR__swapRecoveryOwner__invalidPrevRecoveryOwner();\\n        }\\n\\n        if (oldRecoveryOwner == pointer) {\\n            revert SSR__swapRecoveryOwner__invalidOldRecoveryOwner();\\n        }\\n\\n        recoveryOwners[newRecoveryOwner] = recoveryOwners[oldRecoveryOwner];\\n        recoveryOwners[prevRecoveryOwner] = newRecoveryOwner;\\n        recoveryOwners[oldRecoveryOwner] = address(0);\\n        emit RecoveryOwnerSwapped(newRecoveryOwner, oldRecoveryOwner);\\n    }\\n\\n    /**\\n     * @param guardian Requested address.\\n     * @return Boolean if the address is a guardian of the current wallet.\\n     */\\n    function isGuardian(address guardian) external view returns (bool) {\\n        return guardian != pointer && guardians[guardian] != address(0);\\n    }\\n\\n    /**\\n     * @param recoveryOwner Requested address.\\n     * @return Boolean if the address is a recovery owner of the current wallet.\\n     */\\n    function isRecoveryOwner(address recoveryOwner) external view returns (bool) {\\n        return recoveryOwner != pointer && recoveryOwners[recoveryOwner] != address(0);\\n    }\\n\\n    /**\\n     * @return Array of the guardians of this wallet.\\n     */\\n    function getGuardians() external view returns (address[] memory) {\\n        address[] memory guardiansArray = new address[](guardianCount);\\n        address currentGuardian = guardians[pointer];\\n\\n        uint256 index = 0;\\n        while (currentGuardian != pointer) {\\n            guardiansArray[index] = currentGuardian;\\n            currentGuardian = guardians[currentGuardian];\\n            unchecked {\\n                //Even if it is a view function, we reduce gas costs if it is called by another contract.\\n                ++index;\\n            }\\n        }\\n        return guardiansArray;\\n    }\\n\\n    /**\\n     * @return Array of the recovery owners of this wallet.\\n     */\\n    function getRecoveryOwners() external view returns (address[] memory) {\\n        address[] memory recoveryOwnersArray = new address[](recoveryOwnerCount);\\n        address currentRecoveryOwner = recoveryOwners[pointer];\\n\\n        uint256 index;\\n        while (currentRecoveryOwner != pointer) {\\n            recoveryOwnersArray[index] = currentRecoveryOwner;\\n            currentRecoveryOwner = recoveryOwners[currentRecoveryOwner];\\n            unchecked {\\n                // Even if it is a view function, we reduce gas costs if it is called by another contract.\\n                ++index;\\n            }\\n        }\\n        return recoveryOwnersArray;\\n    }\\n\\n    /**\\n     * @dev Sets up the initial guardian configuration. Can only be called from the init function.\\n     * @param _guardians Array of guardians.\\n     */\\n    function initGuardians(address[] calldata _guardians) internal {\\n        uint256 guardiansLength = _guardians.length;\\n        // There needs to be at least 2 guardians.\\n        if (guardiansLength < 2) revert SSR__initGuardians__underflow();\\n\\n        address currentGuardian = pointer;\\n\\n        for (uint256 i = 0; i < guardiansLength; ) {\\n            address guardian = _guardians[i];\\n            unchecked {\\n                // If this overflows, this bug would be the least of the problems ...\\n                ++i;\\n            }\\n            guardians[currentGuardian] = guardian;\\n            currentGuardian = guardian;\\n            verifyNewRecoveryOwnerOrGuardian(guardian);\\n        }\\n\\n        guardians[currentGuardian] = pointer;\\n        guardianCount = guardiansLength;\\n    }\\n\\n    /**\\n     * @dev Inits the recovery owners.\\n     * @param _recoveryOwners Array of ricovery owners.\\n     * @notice There needs to be at least 2 recovery owners.\\n     */\\n    function initRecoveryOwners(address[] calldata _recoveryOwners) internal {\\n        uint256 recoveryOwnersLength = _recoveryOwners.length;\\n        // There needs to be at least 2 recovery owners.\\n        if (recoveryOwnersLength < 2) revert SSR__initRecoveryOwners__underflow();\\n\\n        address currentRecoveryOwner = pointer;\\n        for (uint256 i = 0; i < recoveryOwnersLength; ) {\\n            address recoveryOwner = _recoveryOwners[i];\\n            recoveryOwners[currentRecoveryOwner] = recoveryOwner;\\n            currentRecoveryOwner = recoveryOwner;\\n            verifyNewRecoveryOwnerOrGuardian(recoveryOwner);\\n\\n            unchecked {\\n                // If this overflows, this bug would be the least of the problems ...\\n                ++i;\\n            }\\n        }\\n\\n        recoveryOwners[currentRecoveryOwner] = pointer;\\n        recoveryOwnerCount = recoveryOwnersLength;\\n    }\\n\\n    /**\\n     * @dev Returns who has access to call a specific function.\\n     * @param funcSelector The function selector: bytes4(keccak256(...)).\\n     */\\n    function access(bytes4 funcSelector) internal view returns (Access) {\\n        if (funcSelector == this.lock.selector) {\\n            // Only a guardian can lock the wallet ...\\n\\n            // If  guardians are locked, we revert ...\\n            if (guardiansLocked) revert SSR__access__guardiansLocked();\\n            else return Access.Guardian;\\n        } else if (funcSelector == this.unlock.selector) {\\n            // Only a guardian + the owner can unlock the wallet ...\\n\\n            return Access.OwnerAndGuardian;\\n        } else if (funcSelector == this.recoveryUnlock.selector) {\\n            // This is in case a guardian is misbehaving ...\\n\\n            //Only the owner + a recovery owner can trigger this ...\\n            return Access.OwnerAndRecoveryOwner;\\n        } else if (funcSelector == this.recover.selector) {\\n            // Only the recovery owner + the guardian can recover the wallet (change the owner keys) ...\\n\\n            return Access.RecoveryOwnerAndGuardian;\\n        } else {\\n            // Else is the owner ... If the the wallet is locked, we revert ...\\n\\n            if (isLocked) revert SSR__access__walletLocked();\\n            else return Access.Owner;\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates that a recovery owner can execute an operation 'now'.\\n     * @param signer The returned address from the provided signature and hash.\\n     */\\n    function validateRecoveryOwner(address signer) internal view {\\n        // Time elapsed since the recovery mechanism was activated.\\n        uint256 elapsedTime = block.timestamp - timeLock;\\n        address currentRecoveryOwner = recoveryOwners[pointer];\\n        bool authorized;\\n        uint256 index;\\n\\n        while (currentRecoveryOwner != pointer) {\\n            if (elapsedTime > 1 weeks * index) {\\n                // Each recovery owner (index ordered) has access to sign the transaction after 1 week.\\n                // e.g. The first recovery owner (indexed 0) can sign immediately, the second recovery owner needs to wait 1 week, the third 2 weeks, and so on ...\\n\\n                if (currentRecoveryOwner == signer) authorized = true;\\n            }\\n            currentRecoveryOwner = recoveryOwners[currentRecoveryOwner];\\n\\n            unchecked {\\n                ++index;\\n            }\\n        }\\n\\n        if (!authorized) revert SSR__validateRecoveryOwner__notAuthorized();\\n    }\\n\\n    /**\\n     * @dev Checks that the provided address is correct for a new recovery owner or guardian.\\n     * @param toVerify The address to verify.\\n     */\\n    function verifyNewRecoveryOwnerOrGuardian(address toVerify) internal view {\\n        if (toVerify.code.length > 0) {\\n            // If the recovery owner is a smart contract wallet, it needs to support EIP1271.\\n            if (!IERC165(toVerify).supportsInterface(0x1626ba7e)) {\\n                revert SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress();\\n            }\\n        }\\n\\n        if (\\n            toVerify == address(0) ||\\n            toVerify == owner ||\\n            guardians[toVerify] != address(0) ||\\n            recoveryOwners[toVerify] != address(0)\\n        ) revert SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress();\\n    }\\n}\\n\",\"keccak256\":\"0xe0cb3fba162f74068ee568664713c7fafd8ed4eb4cef449cbfc14364c38daf63\",\"license\":\"LGPL-3.0-only\"},\"contracts/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IUtils.sol\\\";\\nimport \\\"../interfaces/IEIP1271.sol\\\";\\n\\n/**\\n * @title Utils - Helper functions for Laser wallet.\\n */\\ncontract Utils is IUtils {\\n    /**\\n     * @dev Returns the signer of the hash.\\n     * @param dataHash The hash that was signed.\\n     */\\n    function returnSigner(\\n        bytes32 dataHash,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        bytes memory signatures\\n    ) public view returns (address signer) {\\n        if (v == 0) {\\n            // If v is 0, then it is a contract signature.\\n            // The address of the contract is encoded into r.\\n            signer = address(uint160(uint256(r)));\\n\\n            // // The actual signature.\\n            bytes memory contractSignature;\\n\\n            assembly {\\n                contractSignature := add(add(signatures, s), 0x20)\\n            }\\n\\n            if (IEIP1271(signer).isValidSignature(dataHash, contractSignature) != 0x1626ba7e) {\\n                revert Utils__returnSigner__invalidContractSignature();\\n            }\\n        } else if (v > 30) {\\n            signer = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n        } else {\\n            signer = ecrecover(dataHash, v, r, s);\\n        }\\n\\n        if (signer == address(0)) revert Utils__returnSigner__invalidSignature();\\n    }\\n\\n    /**\\n     * @dev Returns the r, s and v of the signature.\\n     * @param signatures Signature.\\n     * @param pos Which signature to read.\\n     */\\n    function splitSigs(bytes memory signatures, uint256 pos)\\n        public\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        assembly {\\n            let sigPos := mul(0x41, pos)\\n            r := mload(add(signatures, add(sigPos, 0x20)))\\n            s := mload(add(signatures, add(sigPos, 0x40)))\\n            v := byte(0, mload(add(signatures, add(sigPos, 0x60))))\\n        }\\n    }\\n\\n    /**\\n     * @dev Calls a target address, sends value and / or data payload.\\n     * @param to Destination address.\\n     * @param value Amount to send in ETH.\\n     * @param data Data payload.\\n     * @param txGas Amount of gas to forward.\\n     */\\n    function _call(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        assembly {\\n            // We execute a call to the target address and return boolean...\\n            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the gas price.\\n     */\\n    function calculateGasPrice(uint256 maxFeePerGas, uint256 maxPriorityFeePerGas)\\n        internal\\n        view\\n        returns (uint256 gasPrice)\\n    {\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            // Legacy mode.\\n            gasPrice = maxFeePerGas;\\n        } else {\\n            gasPrice = min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x82114b29db7a8b89f12f9f83d86916d3775b4b8297542eb4002a5c3cf72e57f6\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b031916301790556133e7806100326000396000f3fe6080604052600436106102a35760003560e01c80639466df011161016e578063b62654fb116100cb578063e98a801d1161007f578063f698da2511610064578063f698da25146107c1578063f83d08ba14610828578063ffa1ad741461083d57600080fd5b8063e98a801d14610775578063f23a6e611461079457600080fd5b8063c194a046116100b0578063c194a04614610735578063c69227231461074a578063d085835a1461075f57600080fd5b8063b62654fb146106e6578063bc197c811461070657600080fd5b8063a526d83b11610122578063a6f9dae111610107578063a6f9dae114610690578063affed0e0146106b0578063b349229a146106c657600080fd5b8063a526d83b1461065b578063a69df4b51461067b57600080fd5b80639b27a90e116101535780639b27a90e146106015780639fb2346b14610621578063a4e2d6341461064157600080fd5b80639466df0114610594578063956ccd76146105a957600080fd5b8063263a2d1c1161021c578063670d046e116101d0578063816e1067116101b5578063816e10671461053457806384ec720c146105545780638da5cb5b1461057457600080fd5b8063670d046e146104f45780637aaa70241461051457600080fd5b806333987ac01161020157806333987ac0146104935780633408e470146104c157806354e5b2fe146104d457600080fd5b8063263a2d1c1461043b5780632909f9a21461047357600080fd5b80630cd865ec11610273578063150b7a0211610258578063150b7a02146103c25780631626ba7e146103fb578063248b17011461041b57600080fd5b80630cd865ec1461038257806310e88892146103a257600080fd5b806223de29146102e457806301ffc9a71461030b5780630665f04b146103405780630c68ba211461036257600080fd5b366102df5760405134815233907f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f885258749060200160405180910390a2005b600080fd5b3480156102f057600080fd5b506103096102ff3660046128ce565b5050505050505050565b005b34801561031757600080fd5b5061032b61032636600461298f565b610893565b60405190151581526020015b60405180910390f35b34801561034c57600080fd5b50610355610936565b60405161033791906129ac565b34801561036e57600080fd5b5061032b61037d3660046129f9565b610a22565b34801561038e57600080fd5b5061030961039d3660046129f9565b610a5a565b3480156103ae57600080fd5b506103096103bd3660046129f9565b610ade565b3480156103ce57600080fd5b506103e26103dd366004612a14565b610bed565b6040516001600160e01b03199091168152602001610337565b34801561040757600080fd5b506103e2610416366004612b26565b610bff565b34801561042757600080fd5b50610309610436366004612bb2565b610c80565b34801561044757600080fd5b5061045b610456366004612bf4565b610da1565b6040516001600160a01b039091168152602001610337565b34801561047f57600080fd5b5061030961048e366004612c67565b610fbe565b34801561049f57600080fd5b506104b36104ae366004612c9a565b6110fd565b604051908152602001610337565b3480156104cd57600080fd5b50466104b3565b3480156104e057600080fd5b506103096104ef366004612d4e565b6112cf565b34801561050057600080fd5b506104b361050f366004612e2d565b6114bf565b34801561052057600080fd5b5061032b61052f3660046129f9565b6114e6565b34801561054057600080fd5b5061030961054f366004612eaa565b61151e565b34801561056057600080fd5b5061030961056f3660046129f9565b6116db565b34801561058057600080fd5b5060015461045b906001600160a01b031681565b3480156105a057600080fd5b5061030961179e565b3480156105b557600080fd5b506105e36105c4366004612f5b565b6041020160208101516040820151606090920151909260009190911a90565b60408051938452602084019290925260ff1690820152606001610337565b34801561060d57600080fd5b5061030961061c366004612c67565b6117f8565b34801561062d57600080fd5b5061030961063c366004612fa0565b61192f565b34801561064d57600080fd5b5060055461032b9060ff1681565b34801561066757600080fd5b506103096106763660046129f9565b611a53565b34801561068757600080fd5b50610309611b16565b34801561069c57600080fd5b506103096106ab3660046129f9565b611b70565b3480156106bc57600080fd5b506104b360085481565b3480156106d257600080fd5b506103096106e1366004612fa0565b611c23565b3480156106f257600080fd5b5060005461045b906001600160a01b031681565b34801561071257600080fd5b506103e2610721366004612fe3565b63bc197c8160e01b98975050505050505050565b34801561074157600080fd5b50610355611d3e565b34801561075657600080fd5b50610309611e22565b34801561076b57600080fd5b506104b360045481565b34801561078157600080fd5b5060055461032b90610100900460ff1681565b3480156107a057600080fd5b506103e26107af36600461307d565b63f23a6e6160e01b9695505050505050565b3480156107cd57600080fd5b506104b360007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b34801561083457600080fd5b50610309611e4f565b34801561084957600080fd5b506108866040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516103379190613142565b60006301ffc9a760e01b6001600160e01b0319831614806108c45750630b135d3f60e11b6001600160e01b03198316145b806108df5750636cdb3d1360e11b6001600160e01b03198316145b806108fa5750630271189760e51b6001600160e01b03198316145b80610915575063ae029e0b60e01b6001600160e01b03198316145b806109305750630a85bd0160e11b6001600160e01b03198316145b92915050565b6060600060035467ffffffffffffffff81111561095557610955612a83565b60405190808252806020026020018201604052801561097e578160200160208202803683370190505b506001600090815260076020527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b828549192506001600160a01b03909116905b6001600160a01b038216600114610a1a57818382815181106109e1576109e1613155565b6001600160a01b0392831660209182029290920181019190915292811660009081526007909352604090922054909116906001016109bd565b509092915050565b60006001600160a01b0382166001148015906109305750506001600160a01b0390811660009081526007602052604090205416151590565b333014610a7a5760405163de46850560e01b815260040160405180910390fd5b60006004556005805460ff19169055600180546001600160a01b0319166001600160a01b0383169081179091556040519081527ff8b0d9f949d0419338bbce471b281004fd4c9528336fd83b96027356790b9f2c906020015b60405180910390a150565b333014610afe5760405163de46850560e01b815260040160405180910390fd5b306001600160a01b03821603610b27576040516332125e8360e11b815260040160405180910390fd5b6040516301ffc9a760e01b815263ae029e0b60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b96919061316b565b610bb357604051637b66762360e11b815260040160405180910390fd5b60008181556040516001600160a01b038316917fad04cda32d7774350bace4bdca605ed7431195e8c78235e484626b2785de816d91a25b50565b630a85bd0160e11b5b95945050505050565b6020810151604082015160608301516000929190831a83610c23878585858a610da1565b6001549091506001600160a01b03808316911614610c54576040516325dc3e7760e21b815260040160405180910390fd5b507f1626ba7e356f5979dd355a3d2bfb43e80420a480c3b854edce286a82d74968699695505050505050565b333014610ca05760405163de46850560e01b815260040160405180910390fd5b8060005b81811015610d9b5736848483818110610cbf57610cbf613155565b9050602002810190610cd1919061318d565b90506000610ce260408301836131ad565b610ceb916131f4565b90506000610cf882611eab565b90506000816004811115610d0e57610d0e613224565b14610d2c57604051631312e2e760e01b815260040160405180910390fd5b6000610d8a610d3e60208601866129f9565b6020860135610d5060408801886131ad565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a611f87565b905084600101945050505050610ca4565b50505050565b60008260ff16600003610e725750604051630b135d3f60e11b81528490828501602001906001600160a01b03831690631626ba7e90610de6908a90859060040161323a565b602060405180830381865afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e27919061325b565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14610e6c576040516340aec60f60e11b815260040160405180910390fd5b50610f97565b601e8360ff161115610f37576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101879052600190605c0160405160208183030381529060405280519060200120600485610ed7919061328e565b6040805160008152602081018083529390935260ff90911690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015610f26573d6000803e3d6000fd5b505050602060405103519050610f97565b60408051600081526020810180835288905260ff851691810191909152606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f8a573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b038116610bf65760405163b9bf1d7d60e01b815260040160405180910390fd5b333014610fde5760405163de46850560e01b815260040160405180910390fd5b60026001600254610fef91906132b1565b101561100e5760405163dfc8891760e01b815260040160405180910390fd5b6000196001600160a01b038216016110395760405163213cf76760e21b815260040160405180910390fd5b6001600160a01b038281166000908152600660205260409020548116908216146110765760405163763de2e960e11b815260040160405180910390fd5b6001600160a01b038181166000818152600660209081526040808320805488871685528285208054919097166001600160a01b0319918216179096559284905282549094169091556002805460001901905591519081527f7a2a8d37ed276dc71feb15ae98c847c3e205e6a424eec35d2c2ac66500b85ad091015b60405180910390a15050565b6008805460009188919083611111836132c8565b91905055146111335760405163222d101560e11b815260040160405180910390fd5b6111458b8b8b8b8b8b8b8b8b8b611f9f565b60006111888c8c8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a611f87565b9050806111a85760405163b773a2b560e01b815260040160405180910390fd5b60006111b48888611ff2565b905060005a6111c390886132b1565b6111cf90611b586132e1565b905060006111dd83836132f9565b9050611218338260005b6040519080825280601f01601f191660200182016040528015611211576020820181803683370190505b505a611f87565b9350836112385760405163755d1e2d60e11b815260040160405180910390fd5b5a61124390896132b1565b945033156112bd5760405162461bcd60e51b815260206004820152602b60248201527f4d7573742062652063616c6c6564206f66662d636861696e2066726f6d20616460448201527f6472657373207a65726f2e000000000000000000000000000000000000000000606482015260840160405180910390fd5b505050509a9950505050505050505050565b6112d88b61201c565b6112e28888612088565b6112ec8a8a612154565b604080516020810188905290810186905260608101859052600090608001604051602081830303815290604052805190602001209050600080600061136686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506105c4915050565b92509250925060006113b1858585858b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da192505050565b90508f6001600160a01b0316816001600160a01b0316146113e557604051637b0dd98160e01b815260040160405180910390fd5b505050505060008411156114735760006113ff8787611ff2565b905060005a61140e90876132b1565b61141a90611b586132e1565b9050600061142883836132f9565b9050600061144e6001600160a01b038816156114445787611446565b325b8360006111e7565b90508061146e5760405163230f54c560e01b815260040160405180910390fd5b505050505b7f4698fea98f8afb603e7929dfbf88d053ad782cf694c6b9fe88c5ab90be0f9e2f8b8b8b8b8b6040516114aa95949392919061335f565b60405180910390a15050505050505050505050565b60006114d18989898989898989612220565b80519060200120905098975050505050505050565b60006001600160a01b0382166001148015906109305750506001600160a01b0390811660009081526006602052604090205416151590565b6008805460018101909155871461154857604051636f4f3db760e11b815260040160405180910390fd5b61155a8b8b8b8b8b8b8b8b8a8a611f9f565b60006115ab8c8c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a6115a691906132b1565b611f87565b9050801561160457600854604080516001600160a01b038f168152602081018e905280820192909252517f1575d4076918636381fe626ba9076459080815fb43c05c127c6e6b0370d62f4a9181900360600190a1611651565b600854604080516001600160a01b038f168152602081018e905280820192909252517f84a65ac305e8f45f7974e75262e5da051587352d6dcb4719702dd02a8b5038309181900360600190a15b600061165d8888611ff2565b905060005a61166c90886132b1565b61167890611b586132e1565b9050600061168683836132f9565b90506116aa6001600160a01b038816156116a057876116a2565b325b8260006111e7565b9350836116ca576040516303c62d8160e41b815260040160405180910390fd5b505050505050505050505050505050565b3330146116fb5760405163de46850560e01b815260040160405180910390fd5b61170481612389565b600660209081527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a3180546001600160a01b03848116600081815260408082208054949095166001600160a01b03199485161790945560019081905284549092168117909355600280549091019055519081527f24b755696b711f89e9f520613bc428ad6a76ea9e0ea8ce1bcbc4a49d7117e7d49101610ad3565b3330146117be5760405163de46850560e01b815260040160405180910390fd5b6005805461ffff19166101001790556040517f0d581a543b8a5c64309ffed1e0e9a522b78d6c160dc57cc4cb7f78f9a14d5e3490600090a1565b3330146118185760405163de46850560e01b815260040160405180910390fd5b6001600260035461182991906132b1565b10156118485760405163342a2dc560e21b815260040160405180910390fd5b6000196001600160a01b03821601611873576040516302f412b360e21b815260040160405180910390fd5b6001600160a01b038281166000908152600760205260409020548116908216146118b05760405163475347b160e11b815260040160405180910390fd5b6001600160a01b038181166000818152600760209081526040808320805488871685528285208054919097166001600160a01b0319918216179096559284905282549094169091556003805460001901905591519081527fb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c5291016110f1565b33301461194f5760405163de46850560e01b815260040160405180910390fd5b61195882612389565b6001600160a01b0383811660009081526006602052604090205481169082161461199557604051632e3f629360e01b815260040160405180910390fd5b6000196001600160a01b038216016119c057604051631e07136760e11b815260040160405180910390fd5b6001600160a01b038181166000818152600660209081526040808320805488871680865283862080549289166001600160a01b0319938416179055968a168552828520805482168817905593859052805490931690925581519384528301919091527fe0dee883ea9ef61e61adf5f53350c3a1854786a045e2257e94a4837bcca88dd991015b60405180910390a1505050565b333014611a735760405163de46850560e01b815260040160405180910390fd5b611a7c81612389565b600760209081527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880546001600160a01b03848116600081815260408082208054949095166001600160a01b03199485161790945560019081905284549092168117909355600380549091019055519081527fb6182387b7ea948602a7e04e662a27ce251dc3dd014eacaed10dce36b41bf1a59101610ad3565b333014611b365760405163de46850560e01b815260040160405180910390fd5b600060048190556005805460ff191690556040517f63fc9aecb05834d2330c4dad03b320242fa9e8a10eb80cd31518efa9ed781b869190a1565b333014611b905760405163de46850560e01b815260040160405180910390fd5b6001600160a01b0381163b151580611baf57506001600160a01b038116155b80611bc757506001546001600160a01b038281169116145b15611be557604051633927dba760e01b815260040160405180910390fd5b60018190556040516001600160a01b03821681527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690602001610ad3565b333014611c435760405163de46850560e01b815260040160405180910390fd5b611c4c82612389565b6001600160a01b03838116600090815260076020526040902054811690821614611c89576040516371331bbf60e11b815260040160405180910390fd5b6000196001600160a01b03821601611cb4576040516337d7d27160e11b815260040160405180910390fd5b6001600160a01b038181166000818152600760209081526040808320805488871680865283862080549289166001600160a01b0319938416179055968a168552828520805482168817905593859052805490931690925581519384528301919091527f368f677f6b29f927367b2dc64880a52edb673c8a803e0c9bb39917c5c22363719101611a46565b6060600060025467ffffffffffffffff811115611d5d57611d5d612a83565b604051908082528060200260200182016040528015611d86578160200160208202803683370190505b506001600090815260066020527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a31549192506001600160a01b03909116905b6001600160a01b038216600114610a1a5781838281518110611de957611de9613155565b6001600160a01b039283166020918202929092018101919091529281166000908152600690935260409092205490911690600101611dc5565b333014611e425760405163de46850560e01b815260040160405180910390fd5b6005805461ff0019169055565b333014611e6f5760405163de46850560e01b815260040160405180910390fd5b426004556005805460ff191660011790556040517fd550ed24c5d3906c5831b36940c8eb789771469024f7963da735aaf15c59b9a290600090a1565b60006303e17ba360e11b6001600160e01b0319831601611ef657600554610100900460ff1615611eee576040516347bc0bd360e01b815260040160405180910390fd5b506001919050565b6359620b4b60e01b6001600160e01b0319831601611f1657506002919050565b636b9920ff60e01b6001600160e01b0319831601611f3657506004919050565b633cc9e68560e21b6001600160e01b0319831601611f5657506003919050565b60055460ff1615611f7a576040516319786ced60e01b815260040160405180910390fd5b506000919050565b919050565b6000806000845160208601878987f195945050505050565b6000611fb18b8b8b8b8b8b8b8b612220565b805160208201209091506000611fc78a8c6131f4565b90506000611fd482611eab565b9050611fe2818488886124ae565b5050505050505050505050505050565b6000818303612002575081610930565b6120158361201048856132e1565b61277b565b9392505050565b6001546001600160a01b03161561204657604051632dfc004f60e21b815260040160405180910390fd5b6001600160a01b0381163b15158061206557506001600160a01b038116155b156120835760405163087099bd60e01b815260040160405180910390fd5b600155565b8060028110156120ab57604051630d2aa0bf60e11b815260040160405180910390fd5b600160005b828110156121245760008585838181106120cc576120cc613155565b90506020020160208101906120e191906129f9565b6001600160a01b03938416600090815260076020526040902080546001600160a01b03191694821694909417909355506001018161211e81612389565b506120b0565b506001600160a01b0316600090815260076020526040902080546001600160a01b03191660011790556003555050565b806002811015612177576040516354f4eccd60e11b815260040160405180910390fd5b600160005b828110156121f057600085858381811061219857612198613155565b90506020020160208101906121ad91906129f9565b6001600160a01b03938416600090815260066020526040902080546001600160a01b0319169482169490941790935550816121e781612389565b5060010161217c565b506001600160a01b0316600090815260066020526040902080546001600160a01b03191660011790556002555050565b606060007f4c23aa2497696888af245e4eb8d524e7d4cc862b760e1c988678274066ffff8b8a8a8a8a6040516122579291906133a1565b6040805191829003822060208301959095526001600160a01b03909316928101929092526060820152608081019190915260a0810187905260c0810186905260e0810185905261010081018490526101200160408051601f1981840301815291905280516020909101209050601960f81b600160f81b61232760007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b6040517fff00000000000000000000000000000000000000000000000000000000000000938416602082015292909116602183015260228201526042810182905260620160405160208183030381529060405291505098975050505050505050565b6001600160a01b0381163b15612425576040516301ffc9a760e01b8152630b135d3f60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612408919061316b565b61242557604051633da224f960e11b815260040160405180910390fd5b6001600160a01b038116158061244857506001546001600160a01b038281169116145b8061246c57506001600160a01b038181166000908152600760205260409020541615155b8061249057506001600160a01b038181166000908152600660205260409020541615155b15610bea57604051633da224f960e11b815260040160405180910390fd5b6000808560048111156124c3576124c3613224565b14806124e0575060018560048111156124de576124de613224565b145b6124eb5760026124ee565b60015b60ff1690506124fe8160416132f9565b82101561251e57604051630a71486160e21b815260040160405180910390fd5b60008060008060005b8581101561276f5761257088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592506105c4915050565b8094508195508296505050506125bf898585858c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da192505050565b945060008a60048111156125d5576125d5613224565b0361260d576001546001600160a01b03868116911614612608576040516389c3438560e01b815260040160405180910390fd5b612767565b60018a600481111561262157612621613224565b0361265e576001600160a01b038581166000908152600760205260409020541661260857604051631134d27b60e31b815260040160405180910390fd5b60028a600481111561267257612672613224565b036126e557806000036126ad576001546001600160a01b03868116911614612608576040516389c3438560e01b815260040160405180910390fd5b6001600160a01b038581166000908152600760205260409020541661260857604051631134d27b60e31b815260040160405180910390fd5b60038a60048111156126f9576126f9613224565b0361270f57806000036126ad5761260885612791565b60048a600481111561272357612723613224565b036102df578060000361275e576001546001600160a01b03868116911614612608576040516389c3438560e01b815260040160405180910390fd5b61260885612791565b600101612527565b50505050505050505050565b600081831061278a5781612015565b5090919050565b6000600454426127a191906132b1565b6001600090815260066020527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a31549192506001600160a01b0390911690805b6001600160a01b038316600114612849576127fe8162093a806132f9565b84111561282357846001600160a01b0316836001600160a01b03160361282357600191505b6001600160a01b03928316600090815260066020526040902054909216916001016127e0565b81612867576040516322523a6360e11b815260040160405180910390fd5b5050505050565b80356001600160a01b0381168114611f8257600080fd5b60008083601f84011261289757600080fd5b50813567ffffffffffffffff8111156128af57600080fd5b6020830191508360208285010111156128c757600080fd5b9250929050565b60008060008060008060008060c0898b0312156128ea57600080fd5b6128f38961286e565b975061290160208a0161286e565b965061290f60408a0161286e565b955060608901359450608089013567ffffffffffffffff8082111561293357600080fd5b61293f8c838d01612885565b909650945060a08b013591508082111561295857600080fd5b506129658b828c01612885565b999c989b5096995094979396929594505050565b6001600160e01b031981168114610bea57600080fd5b6000602082840312156129a157600080fd5b813561201581612979565b6020808252825182820181905260009190848201906040850190845b818110156129ed5783516001600160a01b0316835292840192918401916001016129c8565b50909695505050505050565b600060208284031215612a0b57600080fd5b6120158261286e565b600080600080600060808688031215612a2c57600080fd5b612a358661286e565b9450612a436020870161286e565b935060408601359250606086013567ffffffffffffffff811115612a6657600080fd5b612a7288828901612885565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612aaa57600080fd5b813567ffffffffffffffff80821115612ac557612ac5612a83565b604051601f8301601f19908116603f01168101908282118183101715612aed57612aed612a83565b81604052838152866020858801011115612b0657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612b3957600080fd5b82359150602083013567ffffffffffffffff811115612b5757600080fd5b612b6385828601612a99565b9150509250929050565b60008083601f840112612b7f57600080fd5b50813567ffffffffffffffff811115612b9757600080fd5b6020830191508360208260051b85010111156128c757600080fd5b60008060208385031215612bc557600080fd5b823567ffffffffffffffff811115612bdc57600080fd5b612be885828601612b6d565b90969095509350505050565b600080600080600060a08688031215612c0c57600080fd5b853594506020860135935060408601359250606086013560ff81168114612c3257600080fd5b9150608086013567ffffffffffffffff811115612c4e57600080fd5b612c5a88828901612a99565b9150509295509295909350565b60008060408385031215612c7a57600080fd5b612c838361286e565b9150612c916020840161286e565b90509250929050565b6000806000806000806000806000806101008b8d031215612cba57600080fd5b612cc38b61286e565b995060208b0135985060408b013567ffffffffffffffff80821115612ce757600080fd5b612cf38e838f01612885565b909a50985060608d0135975060808d0135965060a08d0135955060c08d0135945060e08d0135915080821115612d2857600080fd5b50612d358d828e01612885565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060006101008c8e031215612d7057600080fd5b612d798c61286e565b9a5067ffffffffffffffff8060208e01351115612d9557600080fd5b612da58e60208f01358f01612b6d565b909b50995060408d0135811015612dbb57600080fd5b612dcb8e60408f01358f01612b6d565b909950975060608d0135965060808d0135955060a08d01359450612df160c08e0161286e565b93508060e08e01351115612e0457600080fd5b50612e158d60e08e01358e01612885565b81935080925050509295989b509295989b9093969950565b60008060008060008060008060e0898b031215612e4957600080fd5b612e528961286e565b975060208901359650604089013567ffffffffffffffff811115612e7557600080fd5b612e818b828c01612885565b999c989b50996060810135986080820135985060a0820135975060c09091013595509350505050565b60008060008060008060008060008060006101208c8e031215612ecc57600080fd5b612ed58c61286e565b9a5060208c0135995067ffffffffffffffff8060408e01351115612ef857600080fd5b612f088e60408f01358f01612885565b909a50985060608d0135975060808d0135965060a08d0135955060c08d01359450612f3560e08e0161286e565b9350806101008e01351115612f4957600080fd5b50612e158d6101008e01358e01612885565b60008060408385031215612f6e57600080fd5b823567ffffffffffffffff811115612f8557600080fd5b612f9185828601612a99565b95602094909401359450505050565b600080600060608486031215612fb557600080fd5b612fbe8461286e565b9250612fcc6020850161286e565b9150612fda6040850161286e565b90509250925092565b60008060008060008060008060a0898b031215612fff57600080fd5b6130088961286e565b975061301660208a0161286e565b9650604089013567ffffffffffffffff8082111561303357600080fd5b61303f8c838d01612b6d565b909850965060608b013591508082111561305857600080fd5b6130648c838d01612b6d565b909650945060808b013591508082111561295857600080fd5b60008060008060008060a0878903121561309657600080fd5b61309f8761286e565b95506130ad6020880161286e565b94506040870135935060608701359250608087013567ffffffffffffffff8111156130d757600080fd5b6130e389828a01612885565b979a9699509497509295939492505050565b6000815180845260005b8181101561311b576020818501810151868301820152016130ff565b8181111561312d576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061201560208301846130f5565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561317d57600080fd5b8151801515811461201557600080fd5b60008235605e198336030181126131a357600080fd5b9190910192915050565b6000808335601e198436030181126131c457600080fd5b83018035915067ffffffffffffffff8211156131df57600080fd5b6020019150368190038213156128c757600080fd5b6001600160e01b0319813581811691600485101561321c5780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052602160045260246000fd5b82815260406020820152600061325360408301846130f5565b949350505050565b60006020828403121561326d57600080fd5b815161201581612979565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8416808210156132a8576132a8613278565b90039392505050565b6000828210156132c3576132c3613278565b500390565b6000600182016132da576132da613278565b5060010190565b600082198211156132f4576132f4613278565b500190565b600081600019048311821515161561331357613313613278565b500290565b8183526000602080850194508260005b85811015613354576001600160a01b036133418361286e565b1687529582019590820190600101613328565b509495945050505050565b6001600160a01b0386168152606060208201526000613382606083018688613318565b8281036040840152613395818587613318565b98975050505050505050565b818382376000910190815291905056fea26469706673582212208f17fa1da7887986f45ede7c279ab85fb89f8dec7e8147aa46af3041b30cd06264736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106102a35760003560e01c80639466df011161016e578063b62654fb116100cb578063e98a801d1161007f578063f698da2511610064578063f698da25146107c1578063f83d08ba14610828578063ffa1ad741461083d57600080fd5b8063e98a801d14610775578063f23a6e611461079457600080fd5b8063c194a046116100b0578063c194a04614610735578063c69227231461074a578063d085835a1461075f57600080fd5b8063b62654fb146106e6578063bc197c811461070657600080fd5b8063a526d83b11610122578063a6f9dae111610107578063a6f9dae114610690578063affed0e0146106b0578063b349229a146106c657600080fd5b8063a526d83b1461065b578063a69df4b51461067b57600080fd5b80639b27a90e116101535780639b27a90e146106015780639fb2346b14610621578063a4e2d6341461064157600080fd5b80639466df0114610594578063956ccd76146105a957600080fd5b8063263a2d1c1161021c578063670d046e116101d0578063816e1067116101b5578063816e10671461053457806384ec720c146105545780638da5cb5b1461057457600080fd5b8063670d046e146104f45780637aaa70241461051457600080fd5b806333987ac01161020157806333987ac0146104935780633408e470146104c157806354e5b2fe146104d457600080fd5b8063263a2d1c1461043b5780632909f9a21461047357600080fd5b80630cd865ec11610273578063150b7a0211610258578063150b7a02146103c25780631626ba7e146103fb578063248b17011461041b57600080fd5b80630cd865ec1461038257806310e88892146103a257600080fd5b806223de29146102e457806301ffc9a71461030b5780630665f04b146103405780630c68ba211461036257600080fd5b366102df5760405134815233907f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f885258749060200160405180910390a2005b600080fd5b3480156102f057600080fd5b506103096102ff3660046128ce565b5050505050505050565b005b34801561031757600080fd5b5061032b61032636600461298f565b610893565b60405190151581526020015b60405180910390f35b34801561034c57600080fd5b50610355610936565b60405161033791906129ac565b34801561036e57600080fd5b5061032b61037d3660046129f9565b610a22565b34801561038e57600080fd5b5061030961039d3660046129f9565b610a5a565b3480156103ae57600080fd5b506103096103bd3660046129f9565b610ade565b3480156103ce57600080fd5b506103e26103dd366004612a14565b610bed565b6040516001600160e01b03199091168152602001610337565b34801561040757600080fd5b506103e2610416366004612b26565b610bff565b34801561042757600080fd5b50610309610436366004612bb2565b610c80565b34801561044757600080fd5b5061045b610456366004612bf4565b610da1565b6040516001600160a01b039091168152602001610337565b34801561047f57600080fd5b5061030961048e366004612c67565b610fbe565b34801561049f57600080fd5b506104b36104ae366004612c9a565b6110fd565b604051908152602001610337565b3480156104cd57600080fd5b50466104b3565b3480156104e057600080fd5b506103096104ef366004612d4e565b6112cf565b34801561050057600080fd5b506104b361050f366004612e2d565b6114bf565b34801561052057600080fd5b5061032b61052f3660046129f9565b6114e6565b34801561054057600080fd5b5061030961054f366004612eaa565b61151e565b34801561056057600080fd5b5061030961056f3660046129f9565b6116db565b34801561058057600080fd5b5060015461045b906001600160a01b031681565b3480156105a057600080fd5b5061030961179e565b3480156105b557600080fd5b506105e36105c4366004612f5b565b6041020160208101516040820151606090920151909260009190911a90565b60408051938452602084019290925260ff1690820152606001610337565b34801561060d57600080fd5b5061030961061c366004612c67565b6117f8565b34801561062d57600080fd5b5061030961063c366004612fa0565b61192f565b34801561064d57600080fd5b5060055461032b9060ff1681565b34801561066757600080fd5b506103096106763660046129f9565b611a53565b34801561068757600080fd5b50610309611b16565b34801561069c57600080fd5b506103096106ab3660046129f9565b611b70565b3480156106bc57600080fd5b506104b360085481565b3480156106d257600080fd5b506103096106e1366004612fa0565b611c23565b3480156106f257600080fd5b5060005461045b906001600160a01b031681565b34801561071257600080fd5b506103e2610721366004612fe3565b63bc197c8160e01b98975050505050505050565b34801561074157600080fd5b50610355611d3e565b34801561075657600080fd5b50610309611e22565b34801561076b57600080fd5b506104b360045481565b34801561078157600080fd5b5060055461032b90610100900460ff1681565b3480156107a057600080fd5b506103e26107af36600461307d565b63f23a6e6160e01b9695505050505050565b3480156107cd57600080fd5b506104b360007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b34801561083457600080fd5b50610309611e4f565b34801561084957600080fd5b506108866040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6040516103379190613142565b60006301ffc9a760e01b6001600160e01b0319831614806108c45750630b135d3f60e11b6001600160e01b03198316145b806108df5750636cdb3d1360e11b6001600160e01b03198316145b806108fa5750630271189760e51b6001600160e01b03198316145b80610915575063ae029e0b60e01b6001600160e01b03198316145b806109305750630a85bd0160e11b6001600160e01b03198316145b92915050565b6060600060035467ffffffffffffffff81111561095557610955612a83565b60405190808252806020026020018201604052801561097e578160200160208202803683370190505b506001600090815260076020527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b828549192506001600160a01b03909116905b6001600160a01b038216600114610a1a57818382815181106109e1576109e1613155565b6001600160a01b0392831660209182029290920181019190915292811660009081526007909352604090922054909116906001016109bd565b509092915050565b60006001600160a01b0382166001148015906109305750506001600160a01b0390811660009081526007602052604090205416151590565b333014610a7a5760405163de46850560e01b815260040160405180910390fd5b60006004556005805460ff19169055600180546001600160a01b0319166001600160a01b0383169081179091556040519081527ff8b0d9f949d0419338bbce471b281004fd4c9528336fd83b96027356790b9f2c906020015b60405180910390a150565b333014610afe5760405163de46850560e01b815260040160405180910390fd5b306001600160a01b03821603610b27576040516332125e8360e11b815260040160405180910390fd5b6040516301ffc9a760e01b815263ae029e0b60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b96919061316b565b610bb357604051637b66762360e11b815260040160405180910390fd5b60008181556040516001600160a01b038316917fad04cda32d7774350bace4bdca605ed7431195e8c78235e484626b2785de816d91a25b50565b630a85bd0160e11b5b95945050505050565b6020810151604082015160608301516000929190831a83610c23878585858a610da1565b6001549091506001600160a01b03808316911614610c54576040516325dc3e7760e21b815260040160405180910390fd5b507f1626ba7e356f5979dd355a3d2bfb43e80420a480c3b854edce286a82d74968699695505050505050565b333014610ca05760405163de46850560e01b815260040160405180910390fd5b8060005b81811015610d9b5736848483818110610cbf57610cbf613155565b9050602002810190610cd1919061318d565b90506000610ce260408301836131ad565b610ceb916131f4565b90506000610cf882611eab565b90506000816004811115610d0e57610d0e613224565b14610d2c57604051631312e2e760e01b815260040160405180910390fd5b6000610d8a610d3e60208601866129f9565b6020860135610d5060408801886131ad565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a611f87565b905084600101945050505050610ca4565b50505050565b60008260ff16600003610e725750604051630b135d3f60e11b81528490828501602001906001600160a01b03831690631626ba7e90610de6908a90859060040161323a565b602060405180830381865afa158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e27919061325b565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14610e6c576040516340aec60f60e11b815260040160405180910390fd5b50610f97565b601e8360ff161115610f37576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101879052600190605c0160405160208183030381529060405280519060200120600485610ed7919061328e565b6040805160008152602081018083529390935260ff90911690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015610f26573d6000803e3d6000fd5b505050602060405103519050610f97565b60408051600081526020810180835288905260ff851691810191909152606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f8a573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b038116610bf65760405163b9bf1d7d60e01b815260040160405180910390fd5b333014610fde5760405163de46850560e01b815260040160405180910390fd5b60026001600254610fef91906132b1565b101561100e5760405163dfc8891760e01b815260040160405180910390fd5b6000196001600160a01b038216016110395760405163213cf76760e21b815260040160405180910390fd5b6001600160a01b038281166000908152600660205260409020548116908216146110765760405163763de2e960e11b815260040160405180910390fd5b6001600160a01b038181166000818152600660209081526040808320805488871685528285208054919097166001600160a01b0319918216179096559284905282549094169091556002805460001901905591519081527f7a2a8d37ed276dc71feb15ae98c847c3e205e6a424eec35d2c2ac66500b85ad091015b60405180910390a15050565b6008805460009188919083611111836132c8565b91905055146111335760405163222d101560e11b815260040160405180910390fd5b6111458b8b8b8b8b8b8b8b8b8b611f9f565b60006111888c8c8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050505a611f87565b9050806111a85760405163b773a2b560e01b815260040160405180910390fd5b60006111b48888611ff2565b905060005a6111c390886132b1565b6111cf90611b586132e1565b905060006111dd83836132f9565b9050611218338260005b6040519080825280601f01601f191660200182016040528015611211576020820181803683370190505b505a611f87565b9350836112385760405163755d1e2d60e11b815260040160405180910390fd5b5a61124390896132b1565b945033156112bd5760405162461bcd60e51b815260206004820152602b60248201527f4d7573742062652063616c6c6564206f66662d636861696e2066726f6d20616460448201527f6472657373207a65726f2e000000000000000000000000000000000000000000606482015260840160405180910390fd5b505050509a9950505050505050505050565b6112d88b61201c565b6112e28888612088565b6112ec8a8a612154565b604080516020810188905290810186905260608101859052600090608001604051602081830303815290604052805190602001209050600080600061136686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506105c4915050565b92509250925060006113b1858585858b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da192505050565b90508f6001600160a01b0316816001600160a01b0316146113e557604051637b0dd98160e01b815260040160405180910390fd5b505050505060008411156114735760006113ff8787611ff2565b905060005a61140e90876132b1565b61141a90611b586132e1565b9050600061142883836132f9565b9050600061144e6001600160a01b038816156114445787611446565b325b8360006111e7565b90508061146e5760405163230f54c560e01b815260040160405180910390fd5b505050505b7f4698fea98f8afb603e7929dfbf88d053ad782cf694c6b9fe88c5ab90be0f9e2f8b8b8b8b8b6040516114aa95949392919061335f565b60405180910390a15050505050505050505050565b60006114d18989898989898989612220565b80519060200120905098975050505050505050565b60006001600160a01b0382166001148015906109305750506001600160a01b0390811660009081526006602052604090205416151590565b6008805460018101909155871461154857604051636f4f3db760e11b815260040160405180910390fd5b61155a8b8b8b8b8b8b8b8b8a8a611f9f565b60006115ab8c8c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612710925050505a6115a691906132b1565b611f87565b9050801561160457600854604080516001600160a01b038f168152602081018e905280820192909252517f1575d4076918636381fe626ba9076459080815fb43c05c127c6e6b0370d62f4a9181900360600190a1611651565b600854604080516001600160a01b038f168152602081018e905280820192909252517f84a65ac305e8f45f7974e75262e5da051587352d6dcb4719702dd02a8b5038309181900360600190a15b600061165d8888611ff2565b905060005a61166c90886132b1565b61167890611b586132e1565b9050600061168683836132f9565b90506116aa6001600160a01b038816156116a057876116a2565b325b8260006111e7565b9350836116ca576040516303c62d8160e41b815260040160405180910390fd5b505050505050505050505050505050565b3330146116fb5760405163de46850560e01b815260040160405180910390fd5b61170481612389565b600660209081527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a3180546001600160a01b03848116600081815260408082208054949095166001600160a01b03199485161790945560019081905284549092168117909355600280549091019055519081527f24b755696b711f89e9f520613bc428ad6a76ea9e0ea8ce1bcbc4a49d7117e7d49101610ad3565b3330146117be5760405163de46850560e01b815260040160405180910390fd5b6005805461ffff19166101001790556040517f0d581a543b8a5c64309ffed1e0e9a522b78d6c160dc57cc4cb7f78f9a14d5e3490600090a1565b3330146118185760405163de46850560e01b815260040160405180910390fd5b6001600260035461182991906132b1565b10156118485760405163342a2dc560e21b815260040160405180910390fd5b6000196001600160a01b03821601611873576040516302f412b360e21b815260040160405180910390fd5b6001600160a01b038281166000908152600760205260409020548116908216146118b05760405163475347b160e11b815260040160405180910390fd5b6001600160a01b038181166000818152600760209081526040808320805488871685528285208054919097166001600160a01b0319918216179096559284905282549094169091556003805460001901905591519081527fb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c5291016110f1565b33301461194f5760405163de46850560e01b815260040160405180910390fd5b61195882612389565b6001600160a01b0383811660009081526006602052604090205481169082161461199557604051632e3f629360e01b815260040160405180910390fd5b6000196001600160a01b038216016119c057604051631e07136760e11b815260040160405180910390fd5b6001600160a01b038181166000818152600660209081526040808320805488871680865283862080549289166001600160a01b0319938416179055968a168552828520805482168817905593859052805490931690925581519384528301919091527fe0dee883ea9ef61e61adf5f53350c3a1854786a045e2257e94a4837bcca88dd991015b60405180910390a1505050565b333014611a735760405163de46850560e01b815260040160405180910390fd5b611a7c81612389565b600760209081527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880546001600160a01b03848116600081815260408082208054949095166001600160a01b03199485161790945560019081905284549092168117909355600380549091019055519081527fb6182387b7ea948602a7e04e662a27ce251dc3dd014eacaed10dce36b41bf1a59101610ad3565b333014611b365760405163de46850560e01b815260040160405180910390fd5b600060048190556005805460ff191690556040517f63fc9aecb05834d2330c4dad03b320242fa9e8a10eb80cd31518efa9ed781b869190a1565b333014611b905760405163de46850560e01b815260040160405180910390fd5b6001600160a01b0381163b151580611baf57506001600160a01b038116155b80611bc757506001546001600160a01b038281169116145b15611be557604051633927dba760e01b815260040160405180910390fd5b60018190556040516001600160a01b03821681527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf3690602001610ad3565b333014611c435760405163de46850560e01b815260040160405180910390fd5b611c4c82612389565b6001600160a01b03838116600090815260076020526040902054811690821614611c89576040516371331bbf60e11b815260040160405180910390fd5b6000196001600160a01b03821601611cb4576040516337d7d27160e11b815260040160405180910390fd5b6001600160a01b038181166000818152600760209081526040808320805488871680865283862080549289166001600160a01b0319938416179055968a168552828520805482168817905593859052805490931690925581519384528301919091527f368f677f6b29f927367b2dc64880a52edb673c8a803e0c9bb39917c5c22363719101611a46565b6060600060025467ffffffffffffffff811115611d5d57611d5d612a83565b604051908082528060200260200182016040528015611d86578160200160208202803683370190505b506001600090815260066020527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a31549192506001600160a01b03909116905b6001600160a01b038216600114610a1a5781838281518110611de957611de9613155565b6001600160a01b039283166020918202929092018101919091529281166000908152600690935260409092205490911690600101611dc5565b333014611e425760405163de46850560e01b815260040160405180910390fd5b6005805461ff0019169055565b333014611e6f5760405163de46850560e01b815260040160405180910390fd5b426004556005805460ff191660011790556040517fd550ed24c5d3906c5831b36940c8eb789771469024f7963da735aaf15c59b9a290600090a1565b60006303e17ba360e11b6001600160e01b0319831601611ef657600554610100900460ff1615611eee576040516347bc0bd360e01b815260040160405180910390fd5b506001919050565b6359620b4b60e01b6001600160e01b0319831601611f1657506002919050565b636b9920ff60e01b6001600160e01b0319831601611f3657506004919050565b633cc9e68560e21b6001600160e01b0319831601611f5657506003919050565b60055460ff1615611f7a576040516319786ced60e01b815260040160405180910390fd5b506000919050565b919050565b6000806000845160208601878987f195945050505050565b6000611fb18b8b8b8b8b8b8b8b612220565b805160208201209091506000611fc78a8c6131f4565b90506000611fd482611eab565b9050611fe2818488886124ae565b5050505050505050505050505050565b6000818303612002575081610930565b6120158361201048856132e1565b61277b565b9392505050565b6001546001600160a01b03161561204657604051632dfc004f60e21b815260040160405180910390fd5b6001600160a01b0381163b15158061206557506001600160a01b038116155b156120835760405163087099bd60e01b815260040160405180910390fd5b600155565b8060028110156120ab57604051630d2aa0bf60e11b815260040160405180910390fd5b600160005b828110156121245760008585838181106120cc576120cc613155565b90506020020160208101906120e191906129f9565b6001600160a01b03938416600090815260076020526040902080546001600160a01b03191694821694909417909355506001018161211e81612389565b506120b0565b506001600160a01b0316600090815260076020526040902080546001600160a01b03191660011790556003555050565b806002811015612177576040516354f4eccd60e11b815260040160405180910390fd5b600160005b828110156121f057600085858381811061219857612198613155565b90506020020160208101906121ad91906129f9565b6001600160a01b03938416600090815260066020526040902080546001600160a01b0319169482169490941790935550816121e781612389565b5060010161217c565b506001600160a01b0316600090815260066020526040902080546001600160a01b03191660011790556002555050565b606060007f4c23aa2497696888af245e4eb8d524e7d4cc862b760e1c988678274066ffff8b8a8a8a8a6040516122579291906133a1565b6040805191829003822060208301959095526001600160a01b03909316928101929092526060820152608081019190915260a0810187905260c0810186905260e0810185905261010081018490526101200160408051601f1981840301815291905280516020909101209050601960f81b600160f81b61232760007f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b6040517fff00000000000000000000000000000000000000000000000000000000000000938416602082015292909116602183015260228201526042810182905260620160405160208183030381529060405291505098975050505050505050565b6001600160a01b0381163b15612425576040516301ffc9a760e01b8152630b135d3f60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156123e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612408919061316b565b61242557604051633da224f960e11b815260040160405180910390fd5b6001600160a01b038116158061244857506001546001600160a01b038281169116145b8061246c57506001600160a01b038181166000908152600760205260409020541615155b8061249057506001600160a01b038181166000908152600660205260409020541615155b15610bea57604051633da224f960e11b815260040160405180910390fd5b6000808560048111156124c3576124c3613224565b14806124e0575060018560048111156124de576124de613224565b145b6124eb5760026124ee565b60015b60ff1690506124fe8160416132f9565b82101561251e57604051630a71486160e21b815260040160405180910390fd5b60008060008060005b8581101561276f5761257088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508592506105c4915050565b8094508195508296505050506125bf898585858c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610da192505050565b945060008a60048111156125d5576125d5613224565b0361260d576001546001600160a01b03868116911614612608576040516389c3438560e01b815260040160405180910390fd5b612767565b60018a600481111561262157612621613224565b0361265e576001600160a01b038581166000908152600760205260409020541661260857604051631134d27b60e31b815260040160405180910390fd5b60028a600481111561267257612672613224565b036126e557806000036126ad576001546001600160a01b03868116911614612608576040516389c3438560e01b815260040160405180910390fd5b6001600160a01b038581166000908152600760205260409020541661260857604051631134d27b60e31b815260040160405180910390fd5b60038a60048111156126f9576126f9613224565b0361270f57806000036126ad5761260885612791565b60048a600481111561272357612723613224565b036102df578060000361275e576001546001600160a01b03868116911614612608576040516389c3438560e01b815260040160405180910390fd5b61260885612791565b600101612527565b50505050505050505050565b600081831061278a5781612015565b5090919050565b6000600454426127a191906132b1565b6001600090815260066020527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a31549192506001600160a01b0390911690805b6001600160a01b038316600114612849576127fe8162093a806132f9565b84111561282357846001600160a01b0316836001600160a01b03160361282357600191505b6001600160a01b03928316600090815260066020526040902054909216916001016127e0565b81612867576040516322523a6360e11b815260040160405180910390fd5b5050505050565b80356001600160a01b0381168114611f8257600080fd5b60008083601f84011261289757600080fd5b50813567ffffffffffffffff8111156128af57600080fd5b6020830191508360208285010111156128c757600080fd5b9250929050565b60008060008060008060008060c0898b0312156128ea57600080fd5b6128f38961286e565b975061290160208a0161286e565b965061290f60408a0161286e565b955060608901359450608089013567ffffffffffffffff8082111561293357600080fd5b61293f8c838d01612885565b909650945060a08b013591508082111561295857600080fd5b506129658b828c01612885565b999c989b5096995094979396929594505050565b6001600160e01b031981168114610bea57600080fd5b6000602082840312156129a157600080fd5b813561201581612979565b6020808252825182820181905260009190848201906040850190845b818110156129ed5783516001600160a01b0316835292840192918401916001016129c8565b50909695505050505050565b600060208284031215612a0b57600080fd5b6120158261286e565b600080600080600060808688031215612a2c57600080fd5b612a358661286e565b9450612a436020870161286e565b935060408601359250606086013567ffffffffffffffff811115612a6657600080fd5b612a7288828901612885565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612aaa57600080fd5b813567ffffffffffffffff80821115612ac557612ac5612a83565b604051601f8301601f19908116603f01168101908282118183101715612aed57612aed612a83565b81604052838152866020858801011115612b0657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612b3957600080fd5b82359150602083013567ffffffffffffffff811115612b5757600080fd5b612b6385828601612a99565b9150509250929050565b60008083601f840112612b7f57600080fd5b50813567ffffffffffffffff811115612b9757600080fd5b6020830191508360208260051b85010111156128c757600080fd5b60008060208385031215612bc557600080fd5b823567ffffffffffffffff811115612bdc57600080fd5b612be885828601612b6d565b90969095509350505050565b600080600080600060a08688031215612c0c57600080fd5b853594506020860135935060408601359250606086013560ff81168114612c3257600080fd5b9150608086013567ffffffffffffffff811115612c4e57600080fd5b612c5a88828901612a99565b9150509295509295909350565b60008060408385031215612c7a57600080fd5b612c838361286e565b9150612c916020840161286e565b90509250929050565b6000806000806000806000806000806101008b8d031215612cba57600080fd5b612cc38b61286e565b995060208b0135985060408b013567ffffffffffffffff80821115612ce757600080fd5b612cf38e838f01612885565b909a50985060608d0135975060808d0135965060a08d0135955060c08d0135945060e08d0135915080821115612d2857600080fd5b50612d358d828e01612885565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060006101008c8e031215612d7057600080fd5b612d798c61286e565b9a5067ffffffffffffffff8060208e01351115612d9557600080fd5b612da58e60208f01358f01612b6d565b909b50995060408d0135811015612dbb57600080fd5b612dcb8e60408f01358f01612b6d565b909950975060608d0135965060808d0135955060a08d01359450612df160c08e0161286e565b93508060e08e01351115612e0457600080fd5b50612e158d60e08e01358e01612885565b81935080925050509295989b509295989b9093969950565b60008060008060008060008060e0898b031215612e4957600080fd5b612e528961286e565b975060208901359650604089013567ffffffffffffffff811115612e7557600080fd5b612e818b828c01612885565b999c989b50996060810135986080820135985060a0820135975060c09091013595509350505050565b60008060008060008060008060008060006101208c8e031215612ecc57600080fd5b612ed58c61286e565b9a5060208c0135995067ffffffffffffffff8060408e01351115612ef857600080fd5b612f088e60408f01358f01612885565b909a50985060608d0135975060808d0135965060a08d0135955060c08d01359450612f3560e08e0161286e565b9350806101008e01351115612f4957600080fd5b50612e158d6101008e01358e01612885565b60008060408385031215612f6e57600080fd5b823567ffffffffffffffff811115612f8557600080fd5b612f9185828601612a99565b95602094909401359450505050565b600080600060608486031215612fb557600080fd5b612fbe8461286e565b9250612fcc6020850161286e565b9150612fda6040850161286e565b90509250925092565b60008060008060008060008060a0898b031215612fff57600080fd5b6130088961286e565b975061301660208a0161286e565b9650604089013567ffffffffffffffff8082111561303357600080fd5b61303f8c838d01612b6d565b909850965060608b013591508082111561305857600080fd5b6130648c838d01612b6d565b909650945060808b013591508082111561295857600080fd5b60008060008060008060a0878903121561309657600080fd5b61309f8761286e565b95506130ad6020880161286e565b94506040870135935060608701359250608087013567ffffffffffffffff8111156130d757600080fd5b6130e389828a01612885565b979a9699509497509295939492505050565b6000815180845260005b8181101561311b576020818501810151868301820152016130ff565b8181111561312d576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061201560208301846130f5565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561317d57600080fd5b8151801515811461201557600080fd5b60008235605e198336030181126131a357600080fd5b9190910192915050565b6000808335601e198436030181126131c457600080fd5b83018035915067ffffffffffffffff8211156131df57600080fd5b6020019150368190038213156128c757600080fd5b6001600160e01b0319813581811691600485101561321c5780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052602160045260246000fd5b82815260406020820152600061325360408301846130f5565b949350505050565b60006020828403121561326d57600080fd5b815161201581612979565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8416808210156132a8576132a8613278565b90039392505050565b6000828210156132c3576132c3613278565b500390565b6000600182016132da576132da613278565b5060010190565b600082198211156132f4576132f4613278565b500190565b600081600019048311821515161561331357613313613278565b500290565b8183526000602080850194508260005b85811015613354576001600160a01b036133418361286e565b1687529582019590820190600101613328565b509495945050505050565b6001600160a01b0386168152606060208201526000613382606083018688613318565b8281036040840152613395818587613318565b98975050505050505050565b818382376000910190815291905056fea26469706673582212208f17fa1da7887986f45ede7c279ab85fb89f8dec7e8147aa46af3041b30cd06264736f6c634300080f0033",
  "devdoc": {
    "author": "Rodrigo Herrera I.",
    "errors": {
      "LW__exec__invalidNonce()": [
        {
          "details": "exec() custom errors."
        }
      ],
      "LW__init__notOwner()": [
        {
          "details": "init() custom error."
        }
      ],
      "LW__multiCall__notOwner()": [
        {
          "details": "multiCall() custom error."
        }
      ],
      "LW__simulateTransaction__invalidNonce()": [
        {
          "details": "simulateTransaction() custom errors."
        }
      ],
      "LW__verifySignatures__invalidSignatureLength()": [
        {
          "details": "verifySignatures() custom errors."
        }
      ],
      "LaserWallet__invalidSignature()": [
        {
          "details": "isValidSignature() Laser custom error."
        }
      ],
      "Owner__changeOwner__invalidOwnerAddress()": [
        {
          "details": "changeOwner() custom error."
        }
      ],
      "Owner__initOwner__walletInitialized()": [
        {
          "details": "initOwner() custom errors."
        }
      ],
      "SSR__access__guardiansLocked()": [
        {
          "details": "access() custom errors."
        }
      ],
      "SSR__addGuardian__invalidAddress()": [
        {
          "details": "addGuardian() custom errors."
        }
      ],
      "SSR__addRecoveryOwner__invalidAddress()": [
        {
          "details": "addRecoveryOwner() custom error."
        }
      ],
      "SSR__initGuardians__underflow()": [
        {
          "details": "initGuardians() custom errors."
        }
      ],
      "SSR__initRecoveryOwners__underflow()": [
        {
          "details": "initRecoveryOwners() custom error."
        }
      ],
      "SSR__removeGuardian__underflow()": [
        {
          "details": "removeGuardian() custom errors."
        }
      ],
      "SSR__removeRecoveryOwner__underflow()": [
        {
          "details": "removeRecoveryOwner() custom errors."
        }
      ],
      "SSR__swapGuardian__invalidPrevGuardian()": [
        {
          "details": "swapRecoveryOwner() custom errors."
        }
      ],
      "SSR__swapRecoveryOwner__invalidPrevRecoveryOwner()": [
        {
          "details": "swapRecoveryOwner() custom errors."
        }
      ],
      "SSR__validateRecoveryOwner__notAuthorized()": [
        {
          "details": "validateRecoveryOwner() custom error."
        }
      ],
      "SSR__verifyNewRecoveryOwnerOrGuardian__invalidAddress()": [
        {
          "details": "verifyNewRecoveryOwnerOrGuardian() custom error."
        }
      ],
      "Singleton__upgradeSingleton__incorrectAddress()": [
        {
          "details": "upgradeSingleton() custom errors."
        }
      ],
      "Utils__returnSigner__invalidSignature()": [
        {
          "details": "returnSigner() custom error."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "details": "Adds a guardian to the wallet.",
        "params": {
          "newGuardian": "Address of the new guardian."
        }
      },
      "addRecoveryOwner(address)": {
        "details": "Adds a recovery owner to the wallet.",
        "params": {
          "newRecoveryOwner": "Address of the new recovery owner."
        }
      },
      "changeOwner(address)": {
        "details": "Changes the owner of the wallet.",
        "params": {
          "newOwner": "The address of the new owner."
        }
      },
      "domainSeparator()": {
        "details": "Returns the domain separator of this."
      },
      "exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)": {
        "details": "Executes a generic transaction. It does not support 'delegatecall' for security reasons.",
        "params": {
          "_nonce": "Unsigned integer to avoid replay attacks. It needs to match the current wallet's nonce.",
          "callData": "Data payload for the transaction.",
          "gasLimit": "The transaction's gas limit. It needs to be the same as the actual transaction gas limit.",
          "maxFeePerGas": "Maximum amount that the user is willing to pay for a unit of gas.",
          "maxPriorityFeePerGas": "Miner's tip.",
          "relayer": "Address that forwards the transaction so it abstracts away the gas costs.",
          "signatures": "The signatures of the transaction.",
          "to": "Destination address.",
          "value": "Amount to send."
        }
      },
      "getChainId()": {
        "returns": {
          "chainId": "The chain id of this."
        }
      },
      "getGuardians()": {
        "returns": {
          "_0": "Array of the guardians of this wallet."
        }
      },
      "getRecoveryOwners()": {
        "returns": {
          "_0": "Array of the recovery owners of this wallet."
        }
      },
      "init(address,address[],address[],uint256,uint256,uint256,address,bytes)": {
        "details": "Setup function, sets initial storage of contract.",
        "params": {
          "_guardians": "Addresses that can activate the social recovery mechanism.",
          "_owner": "The owner of the wallet.",
          "_recoveryOwners": "Array of recovery owners. Implementation of Sovereign Social Recovery."
        }
      },
      "isGuardian(address)": {
        "params": {
          "guardian": "Requested address."
        },
        "returns": {
          "_0": "Boolean if the address is a guardian of the current wallet."
        }
      },
      "isRecoveryOwner(address)": {
        "params": {
          "recoveryOwner": "Requested address."
        },
        "returns": {
          "_0": "Boolean if the address is a recovery owner of the current wallet."
        }
      },
      "isValidSignature(bytes32,bytes)": {
        "details": "Implementation of EIP 1271: https://eips.ethereum.org/EIPS/eip-1271.",
        "params": {
          "hash": "Hash of a message signed on behalf of address(this).",
          "signature": "Signature byte array associated with _msgHash."
        },
        "returns": {
          "_0": "Magic value  or reverts with an error message."
        }
      },
      "lock()": {
        "details": "Locks the wallet. Can only be called by a guardian."
      },
      "multiCall((address,uint256,bytes)[])": {
        "details": "Executes a series of generic transactions. It can only be called from exec.",
        "params": {
          "transactions": "Basic transactions array (to, value, calldata)."
        }
      },
      "operationHash(address,uint256,bytes,uint256,uint256,uint256,uint256)": {
        "details": "The transaction's hash. This is necessary to check that the signatures are correct and to avoid replay attacks."
      },
      "recover(address)": {
        "details": "Can only recover with the signature of a recovery owner and guardian.",
        "params": {
          "newOwner": "The new owner address. This is generated instantaneously."
        }
      },
      "recoveryUnlock()": {
        "details": "Unlocks the wallet. Can only be called by the owner + a recovery owner. This is to avoid the wallet being locked forever if a guardian misbehaves. The guardians will be locked until the owner decides otherwise."
      },
      "removeGuardian(address,address)": {
        "details": "Removes a guardian from the wallet.",
        "params": {
          "guardianToRemove": "Address of the guardian to be removed.",
          "prevGuardian": "Address of the previous guardian in the linked list."
        }
      },
      "removeRecoveryOwner(address,address)": {
        "details": "Removes a recovery owner  to the wallet.",
        "params": {
          "prevRecoveryOwner": "Address of the previous recovery owner in the linked list.",
          "recoveryOwnerToRemove": "Address of the recovery owner to be removed."
        }
      },
      "returnSigner(bytes32,bytes32,bytes32,uint8,bytes)": {
        "details": "Returns the signer of the hash.",
        "params": {
          "dataHash": "The hash that was signed."
        }
      },
      "simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)": {
        "details": "Simulates a transaction. This should be called from the relayer, to verify that the transaction will not revert. This does not guarantees 100% that the transaction will succeed, the state will be different next block."
      },
      "splitSigs(bytes,uint256)": {
        "details": "Returns the r, s and v of the signature.",
        "params": {
          "pos": "Which signature to read.",
          "signatures": "Signature."
        }
      },
      "swapGuardian(address,address,address)": {
        "details": "Swaps a guardian for a new address.",
        "params": {
          "newGuardian": "The address of the new guardian.",
          "oldGuardian": "The address of the current guardian to be swapped by the new one.",
          "prevGuardian": "The address of the previous guardian in the link list."
        }
      },
      "swapRecoveryOwner(address,address,address)": {
        "details": "Swaps a recovery owner for a new address.",
        "params": {
          "newRecoveryOwner": "The address of the new recovery owner.",
          "oldRecoveryOwner": "The address of the current recovery owner to be swapped by the new one.",
          "prevRecoveryOwner": "The address of the previous owner in the link list."
        }
      },
      "unlock()": {
        "details": "Unlocks the wallet. Can only be called by a guardian + the owner."
      },
      "unlockGuardians()": {
        "details": "Unlocks the guardians. Can only be called by the owner."
      },
      "upgradeSingleton(address)": {
        "details": "Migrates to a new singleton (implementation).",
        "params": {
          "_singleton": "New implementation address."
        }
      }
    },
    "title": "LaserWallet - EVM based smart contract wallet. Implementes smart social recovery mechanism.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGuardian(address)": {
        "notice": "Can only be called by the owner."
      },
      "addRecoveryOwner(address)": {
        "notice": "Can only be called by the owner."
      },
      "domainSeparator()": {
        "notice": "This is done to avoid replay attacks."
      },
      "exec(address,uint256,bytes,uint256,uint256,uint256,uint256,address,bytes)": {
        "notice": "If 'gasLimit' does not match the actual gas limit of the transaction, the relayer can incur losses. It is the relayer's responsability to make sure that they are the same, the user does not get affected if a mistake is made. We prefer to prioritize the user's safety (not overpay) over the relayer."
      },
      "init(address,address[],address[],uint256,uint256,uint256,address,bytes)": {
        "notice": "It can't be called after initialization."
      },
      "removeGuardian(address,address)": {
        "notice": "Can only be called by the owner."
      },
      "removeRecoveryOwner(address,address)": {
        "notice": "Can only be called by the owner."
      },
      "simulateTransaction(address,uint256,bytes,uint256,uint256,uint256,uint256,bytes)": {
        "notice": "cNeeds to be called off-chain from  address zero."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1046,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "singleton",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 963,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2165,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "recoveryOwnerCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2167,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "guardianCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2169,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "timeLock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2171,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "isLocked",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2174,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "guardiansLocked",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2178,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "recoveryOwners",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2182,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "guardians",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 37,
        "contract": "contracts/LaserWallet.sol:LaserWallet",
        "label": "nonce",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}